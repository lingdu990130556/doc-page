import{_ as u,r as p,o as r,c as d,b as n,d as a,a as s,w as o,e}from"./app-9a7305ee.js";const k={},m=e('<h1 id="工具教程" tabindex="-1"><a class="header-anchor" href="#工具教程" aria-hidden="true">#</a> 工具教程</h1><h2 id="java开发环境的搭建" tabindex="-1"><a class="header-anchor" href="#java开发环境的搭建" aria-hidden="true">#</a> java开发环境的搭建</h2><h3 id="_1-jdk的安装和配置" tabindex="-1"><a class="header-anchor" href="#_1-jdk的安装和配置" aria-hidden="true">#</a> 1.jdk的安装和配置</h3><h4 id="_1-1-什么是jre和jdk" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是jre和jdk" aria-hidden="true">#</a> 1.1.什么是JRE和JDK</h4><p>JDK是java语言的软件开发工具包,我们必须要使用它所提供的工具来完成对java语言的开发。JRE是java运行时的环境,我们使用JRE来运行编译好的java程序。JDK是包含JRE的。所以如果我们要进行java的开发,我们必须要安装JDK。</p><h4 id="_1-2-安装、配置的步骤" tabindex="-1"><a class="header-anchor" href="#_1-2-安装、配置的步骤" aria-hidden="true">#</a> 1.2.安装、配置的步骤</h4><p>首先我们去JDK官网https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html 选择我们合适的JDK版本进行下载。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd97b287956.png" alt="img" loading="lazy"> 安装、配置步骤如下:下载好了之后点击下载包,然后点击下一步 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd98cde7d01.png" alt="img" loading="lazy"> 选择好我们要安装的目录继续下一步 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9961a73d5.png" alt="img" loading="lazy"> 这里选择要将我们jdk安装到哪里,点击下一步 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9a880d804.png" alt="img" loading="lazy"> 等待安装 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9b293f641.png" alt="img" loading="lazy"> 安装完成后点击关闭 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9b4792df4.png" alt="img" loading="lazy"></p><h4 id="_1-3-环境变量的配置" tabindex="-1"><a class="header-anchor" href="#_1-3-环境变量的配置" aria-hidden="true">#</a> 1.3.环境变量的配置</h4><p>我们点击 电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt; <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9be55bacd.png" alt="img" loading="lazy"></p><p>2.maven的安装和配置（选学idea有集成好的）</p><p>3.idea的安装和破解</p><p>4.spring boot的学习</p><h2 id="idea常用快捷键的使用" tabindex="-1"><a class="header-anchor" href="#idea常用快捷键的使用" aria-hidden="true">#</a> IDEA常用快捷键的使用</h2><h3 id="idea常用快捷键使用汇总" tabindex="-1"><a class="header-anchor" href="#idea常用快捷键使用汇总" aria-hidden="true">#</a> IDEA常用快捷键使用汇总</h3><h4 id="_1-ctrl-shift-f-进行全局的搜索" tabindex="-1"><a class="header-anchor" href="#_1-ctrl-shift-f-进行全局的搜索" aria-hidden="true">#</a> 1.Ctrl+Shift+F 进行全局的搜索</h4><p>通常在项目当中,我们需要在全局里面进行一些文字的搜索。这个时候我们可以使用Ctrl+Shift+F来调出全局搜索框,在Find in Path里面输入要搜索的内容。例如输入3308,这个时候就可以看到它所存在的文件以及它所处的位置。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a33ee80e1.png" alt="img" loading="lazy"></p><h4 id="_2-ctrl-f-在某一个单独的文件进行搜索" tabindex="-1"><a class="header-anchor" href="#_2-ctrl-f-在某一个单独的文件进行搜索" aria-hidden="true">#</a> 2.Ctrl+F 在某一个单独的文件进行搜索</h4><p>有的时候我们在某一个单独的文件里面要进行搜索某一个关键字所在的位置,例如新增。这个时候我们可以用Ctrl+F 进行文件的搜索，它所处的位置也就出来了。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a2d1bc66c.png" alt="img" loading="lazy"></p><h4 id="_3-ctrl-e-查询最近使用过的文件" tabindex="-1"><a class="header-anchor" href="#_3-ctrl-e-查询最近使用过的文件" aria-hidden="true">#</a> 3.Ctrl+E 查询最近使用过的文件</h4><p>我们在开发的时候往往会使用到很多的文件,而有的时候我们要查看我们已经使用过的文件。这个时候我们就可以使用到Ctrl+E这个快捷键就可以看到最近使用过哪一些文件。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a4307339b.png" alt="img" loading="lazy"></p><h4 id="_4-ctrl-alt-b-从某一个方法直接进入到实现类里面去" tabindex="-1"><a class="header-anchor" href="#_4-ctrl-alt-b-从某一个方法直接进入到实现类里面去" aria-hidden="true">#</a> 4.Ctrl+Alt+B 从某一个方法直接进入到实现类里面去</h4><p>当我们要从控制层(Controller)一个方法直接进入到它的实现类<code>&lt;ServiceImpl&gt;</code>里面的时候,我们可以使用Ctrl+Alt+B这个快捷键。这样就直接进入到了实现类里面。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a6b7b9336.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a7b231853.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a7cc9e1b7.png" alt="img" loading="lazy"></p><h4 id="_5-alt-enter-导入外部所需的类" tabindex="-1"><a class="header-anchor" href="#_5-alt-enter-导入外部所需的类" aria-hidden="true">#</a> 5.Alt+Enter 导入外部所需的类</h4><p>java文件有的时候需要使用到外部的工具类,我们可以使用Alt+Enter引入外部的工具类。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a8148d358.png" alt="img" loading="lazy"></p><h4 id="_6-ctrl-alt-l-文件的格式一键进行整理" tabindex="-1"><a class="header-anchor" href="#_6-ctrl-alt-l-文件的格式一键进行整理" aria-hidden="true">#</a> 6.Ctrl+Alt+L 文件的格式一键进行整理</h4><p>我们在写代码的时候往往会造成代码的格式混乱,为了方便代码格式的统一。我们可以使用Ctrl+Alt+L这个快捷键进行代码的一键整理。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda25e318c7d.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a7b231853.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a94ce8f69.png" alt="img" loading="lazy"></p><h4 id="_7-ctrl-shift-n-文件的查询" tabindex="-1"><a class="header-anchor" href="#_7-ctrl-shift-n-文件的查询" aria-hidden="true">#</a> 7.Ctrl+Shift+N 文件的查询</h4><p>我们要快速查找到单独的文件，为了节省时间直接使用Ctrl+Shift+N快速的查询文件。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9a9e3eff14.png" alt="img" loading="lazy"></p><h4 id="_8-alt-f7-选中方法可查询该方法被哪些类使用" tabindex="-1"><a class="header-anchor" href="#_8-alt-f7-选中方法可查询该方法被哪些类使用" aria-hidden="true">#</a> 8.Alt+F7 选中方法可查询该方法被哪些类使用</h4><p>Alt+F7对该方法使用可以看到该方法被哪些类使用到了。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda26b13a9e6.png" alt="img" loading="lazy"></p><h4 id="_9-ctrl-h-选中接口名可快速查到该接口实现类" tabindex="-1"><a class="header-anchor" href="#_9-ctrl-h-选中接口名可快速查到该接口实现类" aria-hidden="true">#</a> 9.Ctrl+H 选中接口名可快速查到该接口实现类</h4><p>当我们要查看某个接口有哪些实现类的时候。我们直接对这个接口使用Ctrl+H这个快捷键，就可以看到它有哪些实现类。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9ab7d58bc3.png" alt="img" loading="lazy"></p><h4 id="_10-shift-f6-查询" tabindex="-1"><a class="header-anchor" href="#_10-shift-f6-查询" aria-hidden="true">#</a> 10.Shift+F6 查询</h4><h4 id="总结-idea快捷键是一种十分方便的快捷方式-它可以快速的帮助我们进行查询-导包。让我们更加快速的进行开发-去掉了一些不必要的操作。提升了我们的开发效率。所以我们每个人都应该去掌握这些快捷键。" tabindex="-1"><a class="header-anchor" href="#总结-idea快捷键是一种十分方便的快捷方式-它可以快速的帮助我们进行查询-导包。让我们更加快速的进行开发-去掉了一些不必要的操作。提升了我们的开发效率。所以我们每个人都应该去掌握这些快捷键。" aria-hidden="true">#</a> 总结:IDEA快捷键是一种十分方便的快捷方式,它可以快速的帮助我们进行查询,导包。让我们更加快速的进行开发,去掉了一些不必要的操作。提升了我们的开发效率。所以我们每个人都应该去掌握这些快捷键。</h4><h2 id="idea代码注释模板" tabindex="-1"><a class="header-anchor" href="#idea代码注释模板" aria-hidden="true">#</a> IDEA代码注释模板</h2><h4 id="idea代码注释模板配置" tabindex="-1"><a class="header-anchor" href="#idea代码注释模板配置" aria-hidden="true">#</a> idea代码注释模板配置</h4><ul><li></li></ul>',37),g=n("li",null,[n("p",null,"描述：")],-1),v=n("li",null,[n("p",null,"备注：")],-1),h=n("li",null,[n("p",null,"日期： $time$ $date$")],-1),b=n("li",null,[n("p",null,"作者： zrd"),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,` $param$
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),f={href:"https://github.com/return",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/param",target:"_blank",rel:"noopener noreferrer"},_=e('<p>methodReturnType()`</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-04/5ed89cf0a80fd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="idea常用插件的使用" tabindex="-1"><a class="header-anchor" href="#idea常用插件的使用" aria-hidden="true">#</a> IDEA常用插件的使用</h2><h3 id="_1-save-action" tabindex="-1"><a class="header-anchor" href="#_1-save-action" aria-hidden="true">#</a> 1.save action</h3><p>save action是一个非常智能化的插件,他可以帮我们自动导包。自动格式化代码,自动保存代码。我们需要在plugins里面搜索save action。点击下载和安装。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9e3cfdd3e0.png" alt="img" loading="lazy"> 安装了之后在settings里面勾选3个选项。这样我们就可以实现这些功能。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9e30d47aed.png" alt="img" loading="lazy"></p><h3 id="_2-lombok-plugin" tabindex="-1"><a class="header-anchor" href="#_2-lombok-plugin" aria-hidden="true">#</a> 2.lombok plugin</h3><p>lombok plugin 可以简化java代码,它可以自动的生成getter,setter,toString,equal我们java实体类里面的方法。还可以生成log4j的日志文件。安装步骤和save action一样。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9e4b570662.png" alt="img" loading="lazy"></p><h3 id="_3-maven-helper" tabindex="-1"><a class="header-anchor" href="#_3-maven-helper" aria-hidden="true">#</a> 3.maven Helper</h3><p>maven Helper安装了之后,打开pom.xml文件就会有一个Dependency Analyzer,它查看maven依赖更加的方便。安装步骤和save action一样。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9e4db0cd2a.png" alt="img" loading="lazy"> 当我们完成安装之后,再进入pom.xml文件里面查看的时候。点击Dependency Analyzer可以很方便的查看依赖。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9e54a4ac1d.png" alt="img" loading="lazy"></p><h3 id="_4-alibaba-java-coding-guidelines" tabindex="-1"><a class="header-anchor" href="#_4-alibaba-java-coding-guidelines" aria-hidden="true">#</a> 4.Alibaba java Coding Guidelines</h3><p>Alibaba java Coding Guidelines这个插件的作用是检测我们书写的代码质量的规范,我们可以通过扫描我们代码看出哪里的问题。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddd40a03313.png" alt="img" loading="lazy"></p><h4 id="总结-idea插件是一种十分方便的工具-它可以使我们的开发变得更加的简单和方便。所以我们都应该去熟悉它。" tabindex="-1"><a class="header-anchor" href="#总结-idea插件是一种十分方便的工具-它可以使我们的开发变得更加的简单和方便。所以我们都应该去熟悉它。" aria-hidden="true">#</a> 总结:IDEA插件是一种十分方便的工具,它可以使我们的开发变得更加的简单和方便。所以我们都应该去熟悉它。</h4><h2 id="工具库的学习和使用" tabindex="-1"><a class="header-anchor" href="#工具库的学习和使用" aria-hidden="true">#</a> 工具库的学习和使用</h2><h3 id="hutool的使用" tabindex="-1"><a class="header-anchor" href="#hutool的使用" aria-hidden="true">#</a> Hutool的使用</h3><p>Hutool是一个开源的java基础工具类。Hutool是一个java工具包类库,对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装,它可以组成各种util工具类。Hutool的存在就是为了减少代码搜索成本，避免网络上参差不齐的代码出现导致的bug。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9f068b0069.png" alt="img" loading="lazy"></p><h2 id="包含组件" tabindex="-1"><a class="header-anchor" href="#包含组件" aria-hidden="true">#</a> 包含组件</h2><p>下面就是它的一些核心模块还有组件。 模块 介绍 hutool-aop JDK动态代理封装，提供非IOC下的切面支持 hutool-bloomFilter 布隆过滤，提供一些Hash算法的布隆过滤 hutool-cache 简单缓存实现 hutool-core 核心，包括Bean操作、日期、各种Util等 hutool-cron 定时任务模块，提供类Crontab表达式的定时任务 hutool-crypto 加密解密模块，提供对称、非对称和摘要算法封装 hutool-db JDBC封装后的数据操作，基于ActiveRecord思想 hutool-dfa 基于DFA模型的多关键字查找 hutool-extra 扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等） hutool-http 基于HttpUrlConnection的Http客户端封装 hutool-log 自动识别日志实现的日志门面 hutool-script 脚本执行封装，例如Javascript hutool-setting 功能更强大的Setting配置文件和Properties封装 hutool-system 系统参数调用封装（JVM信息等） hutool-json JSON实现 hutool-captcha 图片验证码实现 hutool-poi 针对POI中Excel和Word的封装 hutool-socket 基于Java的NIO和AIO的Socket封装 可以根据需求对每个模块单独引入，也可以通过引入hutool-all方式引入所有模块。</p><h2 id="安装hutool" tabindex="-1"><a class="header-anchor" href="#安装hutool" aria-hidden="true">#</a> 安装hutool</h2><p>我们可以在我们的maven项目里面pom.xml文件里面添加如下的注解,就可以引入Hutool所需要的的jar包。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9f749e63e9.png" alt="img" loading="lazy"> 或者我们点击链接进行下载,下载完成以后再把它导入到maven项目依赖里面。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9f8d90210b.png" alt="img" loading="lazy"></p><h2 id="_1-首先他支持泛型的克隆接口cloneable和克隆类clonsupport" tabindex="-1"><a class="header-anchor" href="#_1-首先他支持泛型的克隆接口cloneable和克隆类clonsupport" aria-hidden="true">#</a> 1.首先他支持泛型的克隆接口Cloneable和克隆类ClonSupport</h2><h3 id="_1-1-实现cloneable接口" tabindex="-1"><a class="header-anchor" href="#_1-1-实现cloneable接口" aria-hidden="true">#</a> 1.1.实现Cloneable接口</h3><p>我们首先创建2个测试类Test1和Test2。test1首先实现Cloneable接口。然后重写它的克隆方法。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda03633c109.png" alt="img" loading="lazy"> 在Test2里面创建Test1对象并调用Test1的Clone方法。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda046419286.png" alt="img" loading="lazy"></p><h3 id="_1-2-继承clonesupport类" tabindex="-1"><a class="header-anchor" href="#_1-2-继承clonesupport类" aria-hidden="true">#</a> 1.2.继承CloneSupport类</h3><p>我们可以看到CloneSupport这个类实现了Cloneable这个接口,而且已经重写了Clone的这个方法。我们自定义的类只需要继承这个CloneSupport类就可以调用Clone的方法。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda0446d33d1.png" alt="img" loading="lazy"> Test1继承CloneSupport类,在Test2里面直接调用Test1的克隆Clone方法。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda050d9b1fd.png" alt="img" loading="lazy"></p><h2 id="_2-类型转换工具类-convert" tabindex="-1"><a class="header-anchor" href="#_2-类型转换工具类-convert" aria-hidden="true">#</a> 2.类型转换工具类-Convert</h2><p>Convert类可以说是一个工具方法类，里面封装了针对Java常见类型的转换，用于简化类型转换。Convert类中大部分方法为toXXX，参数为Object，可以实现将任意可能的类型转换为指定类型。同时支持第二个参数defaultValue用于在转换失败时返回一个默认值。</p><h3 id="_2-1-将指定类型转换为字符串-convert-tostr" tabindex="-1"><a class="header-anchor" href="#_2-1-将指定类型转换为字符串-convert-tostr" aria-hidden="true">#</a> 2.1.将指定类型转换为字符串 Convert.toStr()</h3><p>Convert.toStr(Param)这个方法可以将我们传入的参数Param类型转换为String字符串的类型。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda0aa33cc4a.png" alt="img" loading="lazy"></p><h3 id="_2-2-转换为指定类型数组-convert-to-array" tabindex="-1"><a class="header-anchor" href="#_2-2-转换为指定类型数组-convert-to-array" aria-hidden="true">#</a> 2.2.转换为指定类型数组 Convert.to**Array()</h3><p>使用Convert.to**Array()可以将我们数组转换成我们所需要的的数组。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc64b6265d2.png" alt="img" loading="lazy"></p><h3 id="_2-3-转换为日期对象-convert-todate" tabindex="-1"><a class="header-anchor" href="#_2-3-转换为日期对象-convert-todate" aria-hidden="true">#</a> 2.3.转换为日期对象 Convert.toDate()</h3><p>这里的日期格式一定要规范,不然就会返回null值。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda0bae01db7.png" alt="img" loading="lazy"></p><h3 id="_2-4-转换为集合-convert-tolist" tabindex="-1"><a class="header-anchor" href="#_2-4-转换为集合-convert-tolist" aria-hidden="true">#</a> 2.4.转换为集合 Convert.toList()</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5eda1d883e73a.png" alt="img" loading="lazy"></p><h3 id="_2-5-半角和全角的转换" tabindex="-1"><a class="header-anchor" href="#_2-5-半角和全角的转换" aria-hidden="true">#</a> 2.5.半角和全角的转换</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc68b8d1f79.png" alt="img" loading="lazy"></p><h3 id="_2-6-十六进制的转换-hex" tabindex="-1"><a class="header-anchor" href="#_2-6-十六进制的转换-hex" aria-hidden="true">#</a> 2.6.十六进制的转换(Hex)</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc6b8438a9a.png" alt="img" loading="lazy"></p><h3 id="_2-7-unicode和字符串转换" tabindex="-1"><a class="header-anchor" href="#_2-7-unicode和字符串转换" aria-hidden="true">#</a> 2.7.Unicode和字符串转换</h3><p>这个转换和十六进制的转换是类似的,代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc6c7c14ba2.png" alt="img" loading="lazy"></p><h3 id="_2-8-编码转换" tabindex="-1"><a class="header-anchor" href="#_2-8-编码转换" aria-hidden="true">#</a> 2.8.编码转换</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc6def7da00.png" alt="img" loading="lazy"></p><h3 id="_2-9-时间转换convert-converttime" tabindex="-1"><a class="header-anchor" href="#_2-9-时间转换convert-converttime" aria-hidden="true">#</a> 2.9.时间转换Convert.convertTime()</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc6f2b457d1.png" alt="img" loading="lazy"></p><h3 id="_2-10-金额大小转换convert-digittochinese" tabindex="-1"><a class="header-anchor" href="#_2-10-金额大小转换convert-digittochinese" aria-hidden="true">#</a> 2.10.金额大小转换Convert.digitToChinese()</h3><p>这里可以将我们金钱的数字转换为大写的中国文字 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc6ffed4e54.png" alt="img" loading="lazy"></p><h3 id="_2-11-原始类和包装类转换" tabindex="-1"><a class="header-anchor" href="#_2-11-原始类和包装类转换" aria-hidden="true">#</a> 2.11.原始类和包装类转换</h3><p>代码如下 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc72ba56760.png" alt="img" loading="lazy"></p><h4 id="总结-conver这个工具类是一个十分方便且好用的工具类-它提供了各种常见类型的转换。使用到它所给出的方法就可以轻松实现。这样我们可以不用自己去手动的创建某些功能。为我们开发提供了不少的便利。它在我们的开发当中也是会经常的被使用到。所以我们必须要掌握它。" tabindex="-1"><a class="header-anchor" href="#总结-conver这个工具类是一个十分方便且好用的工具类-它提供了各种常见类型的转换。使用到它所给出的方法就可以轻松实现。这样我们可以不用自己去手动的创建某些功能。为我们开发提供了不少的便利。它在我们的开发当中也是会经常的被使用到。所以我们必须要掌握它。" aria-hidden="true">#</a> 总结:Conver这个工具类是一个十分方便且好用的工具类,它提供了各种常见类型的转换。使用到它所给出的方法就可以轻松实现。这样我们可以不用自己去手动的创建某些功能。为我们开发提供了不少的便利。它在我们的开发当中也是会经常的被使用到。所以我们必须要掌握它。</h4><h2 id="_3-日期时间" tabindex="-1"><a class="header-anchor" href="#_3-日期时间" aria-hidden="true">#</a> 3.日期时间</h2><h3 id="_3-1-日期时间工具dateutil" tabindex="-1"><a class="header-anchor" href="#_3-1-日期时间工具dateutil" aria-hidden="true">#</a> 3.1.日期时间工具DateUtil</h3><p>Date、long、Calendar之间的相互转换 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc7a6a0df5f.png" alt="img" loading="lazy"> 字符串转日期格式 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc77b89a92b.png" alt="img" loading="lazy"> 日期格式化进行输出 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc794ce80ec.png" alt="img" loading="lazy"> 获取Date对象的某个部分,我们可以获取Date的年,月,时间部分。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc7cd399bd4.png" alt="img" loading="lazy"> 获得开始和结束时间,例如我们要获得每天,每月或者每年的开始和结束时间。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc7d82a209d.png" alt="img" loading="lazy"> 日期时间偏移,日期或时间的偏移指针对某个日期增加或减少分、小时、天等等，达到日期变更的目的。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc7f7b3839b.png" alt="img" loading="lazy"> 日期时间差,有时候我们需要计算两个日期之间的时间差（相差天数、相差小时数等等）。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc80d5e3a20.png" alt="img" loading="lazy"> 计时器，计时器用于计算某段代码或过程花费的时间。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc839d682ff.png" alt="img" loading="lazy"> 补充 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc84121261e.png" alt="img" loading="lazy"></p><h3 id="_3-2-日期时间对象datetime" tabindex="-1"><a class="header-anchor" href="#_3-2-日期时间对象datetime" aria-hidden="true">#</a> 3.2.日期时间对象DateTime</h3><p>构建对象有两种方式DateTime.of和new DateTime <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edc9ec7975f4.png" alt="img" loading="lazy"> 获得日期的年,月,日 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edca02e6dea8.png" alt="img" loading="lazy"></p><h4 id="总结-日期时间的工具对于我们开发来说是十分重要的。它可以为我们得到-修改等一系列操作时间的方法进行了封装。让我们十分的便利。" tabindex="-1"><a class="header-anchor" href="#总结-日期时间的工具对于我们开发来说是十分重要的。它可以为我们得到-修改等一系列操作时间的方法进行了封装。让我们十分的便利。" aria-hidden="true">#</a> 总结:日期时间的工具对于我们开发来说是十分重要的。它可以为我们得到,修改等一系列操作时间的方法进行了封装。让我们十分的便利。</h4><h2 id="项目常用注解说明" tabindex="-1"><a class="header-anchor" href="#项目常用注解说明" aria-hidden="true">#</a> 项目常用注解说明</h2><h2 id="_1-通用mapper相关注解" tabindex="-1"><a class="header-anchor" href="#_1-通用mapper相关注解" aria-hidden="true">#</a> 1.通用mapper相关注解</h2>',57),x={id:"_1-1-table-建立实体类和数据库表之间的关系。",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_1-1-table-建立实体类和数据库表之间的关系。","aria-hidden":"true"},"#",-1),q={href:"https://github.com/Table",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/Table",target:"_blank",rel:"noopener noreferrer"},P=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b10abeee8.png",alt:"img",loading:"lazy"},null,-1),C={id:"_1-2-column-建立实体类属性和数据库表字段之间的对应关系",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#_1-2-column-建立实体类属性和数据库表字段之间的对应关系","aria-hidden":"true"},"#",-1),D={href:"https://github.com/column",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/column",target:"_blank",rel:"noopener noreferrer"},z=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b17c8b357.png",alt:"img",loading:"lazy"},null,-1),T={id:"_1-3-id-指明这个键是主键",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_1-3-id-指明这个键是主键","aria-hidden":"true"},"#",-1),U={href:"https://github.com/Id",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/Id",target:"_blank",rel:"noopener noreferrer"},M=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b261d675a.png",alt:"img",loading:"lazy"},null,-1),B={id:"_1-4-generatedvalue-执行insert操作之后-把数据库递增的主键写到实体类当中。",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_1-4-generatedvalue-执行insert操作之后-把数据库递增的主键写到实体类当中。","aria-hidden":"true"},"#",-1),R={href:"https://github.com/GeneratedValue",target:"_blank",rel:"noopener noreferrer"},O=n("figure",null,[n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b2c986d31.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),N={id:"_1-5-transient-标记实体类中属性和数据库中不同的字段",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#_1-5-transient-标记实体类中属性和数据库中不同的字段","aria-hidden":"true"},"#",-1),F={href:"https://github.com/Transient",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,[a("这个注解也是作用到实体类的属性上面的。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b41cc303f.png",alt:"img",loading:"lazy"})],-1),J=n("h2",{id:"_2-防重复提交注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-防重复提交注解","aria-hidden":"true"},"#"),a(" 2.防重复提交注解")],-1),K={id:"_2-1-repeatsubmit这个注解",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_2-1-repeatsubmit这个注解","aria-hidden":"true"},"#",-1),V={href:"https://github.com/RepeatSubmit",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/RepeatSubmit",target:"_blank",rel:"noopener noreferrer"},W=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bd53853b1.png",alt:"img",loading:"lazy"},null,-1),Y=n("h2",{id:"_3-restfull注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-restfull注解","aria-hidden":"true"},"#"),a(" 3.restfull注解")],-1),Z=n("p",null,"restfull满足rest的约束条件和原则。URL定位的是资源,HTTP描述的是行为。它是一种设计的思想,最常用的restfull的注解有4个",-1),$={id:"_3-1-get-代表的是获得和查询的意思",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_3-1-get-代表的是获得和查询的意思","aria-hidden":"true"},"#",-1),an={href:"https://github.com/GET",target:"_blank",rel:"noopener noreferrer"},sn=n("figure",null,[n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b8d68b61b.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),tn={id:"_3-2-post-代表的是提交的意思",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#_3-2-post-代表的是提交的意思","aria-hidden":"true"},"#",-1),pn={href:"https://github.com/POST",target:"_blank",rel:"noopener noreferrer"},on=n("figure",null,[n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b96cceecb.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),cn={id:"_3-3-put-代表的是修改的意思",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#_3-3-put-代表的是修改的意思","aria-hidden":"true"},"#",-1),un={href:"https://github.com/PUT",target:"_blank",rel:"noopener noreferrer"},rn=n("figure",null,[n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9b99b6b527.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),dn={id:"_3-4-delete-代表的是删除的意思",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#_3-4-delete-代表的是删除的意思","aria-hidden":"true"},"#",-1),mn={href:"https://github.com/DELETE",target:"_blank",rel:"noopener noreferrer"},gn=e('<figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bcc34481f.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="总结-restfull的注解作用在我们web控制层-controller-的方法上面-不同的注解代表了不同的访问方式。所以我们在进行操作的时候要选择对应的注解" tabindex="-1"><a class="header-anchor" href="#总结-restfull的注解作用在我们web控制层-controller-的方法上面-不同的注解代表了不同的访问方式。所以我们在进行操作的时候要选择对应的注解" aria-hidden="true">#</a> 总结:restfull的注解作用在我们web控制层(controller)的方法上面,不同的注解代表了不同的访问方式。所以我们在进行操作的时候要选择对应的注解</h4><h2 id="_4-swagger注解" tabindex="-1"><a class="header-anchor" href="#_4-swagger注解" aria-hidden="true">#</a> 4.swagger注解</h2><p>swqgger是一个接口生成文档的工具,它可以很好的辅助我们的项目。让我们前后端进行分离。后端只需进行代码的书写</p>',4),vn={id:"_4-1-api",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#_4-1-api","aria-hidden":"true"},"#",-1),bn={href:"https://github.com/Api",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,[a("这个注解用在类的上面,代表了这个类是swagger的资源。里面有一个value或者tags的标签,填上标签对应的信息。指明了这个类的它的作用是什么。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bd066852d.png",alt:"img",loading:"lazy"})],-1),yn={id:"_4-2-apioperation",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#_4-2-apioperation","aria-hidden":"true"},"#",-1),xn={href:"https://github.com/ApiOperation",target:"_blank",rel:"noopener noreferrer"},wn=n("p",null,[a("这个注解作用在方法上面,用来表示这个方法做什么样的操作。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bd2ce863b.png",alt:"img",loading:"lazy"})],-1),qn={id:"_4-3-apimodel",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#_4-3-apimodel","aria-hidden":"true"},"#",-1),Pn={href:"https://github.com/ApiModel",target:"_blank",rel:"noopener noreferrer"},Cn=n("p",null,[a("作用在实体类上面,说明实体类的作用。这样swagger就可以解析这个类。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bd99c4246.png",alt:"img",loading:"lazy"})],-1),An={id:"_4-4-apimodelproperty",tabindex:"-1"},Dn=n("a",{class:"header-anchor",href:"#_4-4-apimodelproperty","aria-hidden":"true"},"#",-1),jn={href:"https://github.com/ApiModelProperty",target:"_blank",rel:"noopener noreferrer"},zn=n("p",null,[a("用在实体类的属性上面,用来表明这个属性的作用。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9be2204c69.png",alt:"img",loading:"lazy"})],-1),Tn={id:"_4-5-apiimplicitparams",tabindex:"-1"},En=n("a",{class:"header-anchor",href:"#_4-5-apiimplicitparams","aria-hidden":"true"},"#",-1),Un={href:"https://github.com/ApiImplicitParams",target:"_blank",rel:"noopener noreferrer"},In=n("p",null,[a("这是一个参数的注解,用在方法的上面，里面包含了多个ApiImplicitParam()。 "),n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bed248f6e.png",alt:"img",loading:"lazy"})],-1),Mn={id:"_4-6-apiimplicitparam",tabindex:"-1"},Bn=n("a",{class:"header-anchor",href:"#_4-6-apiimplicitparam","aria-hidden":"true"},"#",-1),Ln={href:"https://github.com/ApiImplicitParam",target:"_blank",rel:"noopener noreferrer"},Rn=e('<p>这个是单独参数的注解,用来表示这个这个参数的作用,类型。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9bf52c80c7.png" alt="img" loading="lazy"></p><h4 id="总结-swagger是一款更好书写api文档的完整框架-它可以让我们开发工作进行前后端的分离。简便了我们的开发。也能够测试我们的功能是否可用-是开发人员必备的工具。" tabindex="-1"><a class="header-anchor" href="#总结-swagger是一款更好书写api文档的完整框架-它可以让我们开发工作进行前后端的分离。简便了我们的开发。也能够测试我们的功能是否可用-是开发人员必备的工具。" aria-hidden="true">#</a> 总结:swagger是一款更好书写API文档的完整框架,它可以让我们开发工作进行前后端的分离。简便了我们的开发。也能够测试我们的功能是否可用,是开发人员必备的工具。</h4><h2 id="_5-翻译注解" tabindex="-1"><a class="header-anchor" href="#_5-翻译注解" aria-hidden="true">#</a> 5.翻译注解</h2><h2 id="_6-权限注解" tabindex="-1"><a class="header-anchor" href="#_6-权限注解" aria-hidden="true">#</a> 6.权限注解</h2><h3 id="shiro权限的注解" tabindex="-1"><a class="header-anchor" href="#shiro权限的注解" aria-hidden="true">#</a> Shiro权限的注解</h3>',5),On={id:"_6-1-requiresauthentication",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_6-1-requiresauthentication","aria-hidden":"true"},"#",-1),Hn={href:"https://github.com/RequiresAuthentication",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/RequiresAuthentication",target:"_blank",rel:"noopener noreferrer"},Xn={id:"_6-2-requiresguest",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#_6-2-requiresguest","aria-hidden":"true"},"#",-1),Kn={href:"https://github.com/RequiresGuest",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/RequiresGuest",target:"_blank",rel:"noopener noreferrer"},Vn={id:"_6-3-requirespermissions",tabindex:"-1"},Qn=n("a",{class:"header-anchor",href:"#_6-3-requirespermissions","aria-hidden":"true"},"#",-1),Wn={href:"https://github.com/RequiresPermissions",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://github.com/RequiresPermissions",target:"_blank",rel:"noopener noreferrer"},Zn={id:"_6-4-requiresroles",tabindex:"-1"},$n=n("a",{class:"header-anchor",href:"#_6-4-requiresroles","aria-hidden":"true"},"#",-1),na={href:"https://github.com/RequiresRoles",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://github.com/RequiresRoles",target:"_blank",rel:"noopener noreferrer"},sa={id:"_6-5-requiresuser",tabindex:"-1"},ta=n("a",{class:"header-anchor",href:"#_6-5-requiresuser","aria-hidden":"true"},"#",-1),ea={href:"https://github.com/RequiresUser",target:"_blank",rel:"noopener noreferrer"},pa={href:"https://github.com/RequiresUser",target:"_blank",rel:"noopener noreferrer"},oa=n("h2",{id:"_7-lombok注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-lombok注解","aria-hidden":"true"},"#"),a(" 7.lombok注解")],-1),ca={id:"_7-1-data",tabindex:"-1"},ia=n("a",{class:"header-anchor",href:"#_7-1-data","aria-hidden":"true"},"#",-1),la={href:"https://github.com/Data",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://github.com/getter",target:"_blank",rel:"noopener noreferrer"},ra={href:"https://github.com/setter",target:"_blank",rel:"noopener noreferrer"},da={href:"https://github.com/AllArgsConstructor",target:"_blank",rel:"noopener noreferrer"},ka={href:"https://github.com/NOArgsConstructor",target:"_blank",rel:"noopener noreferrer"},ma={href:"https://github.com/EqualsAndHashCode",target:"_blank",rel:"noopener noreferrer"},ga={href:"https://github.com/ToString",target:"_blank",rel:"noopener noreferrer"},va=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-05/5ed9dc80c0df8.png",alt:"img",loading:"lazy"},null,-1),ha={id:"_7-2-getter",tabindex:"-1"},ba=n("a",{class:"header-anchor",href:"#_7-2-getter","aria-hidden":"true"},"#",-1),fa={href:"https://github.com/Getter",target:"_blank",rel:"noopener noreferrer"},ya=n("p",null,"它为javaBean自动生成getter的方法,它也是作用在实体类上面。",-1),_a={id:"_7-3-setter",tabindex:"-1"},xa=n("a",{class:"header-anchor",href:"#_7-3-setter","aria-hidden":"true"},"#",-1),wa={href:"https://github.com/Setter",target:"_blank",rel:"noopener noreferrer"},qa=n("p",null,"它为javaBean自动生成setter的方法,它也是作用在实体类上面。",-1),Sa={id:"_7-4-noargsconstructor",tabindex:"-1"},Pa=n("a",{class:"header-anchor",href:"#_7-4-noargsconstructor","aria-hidden":"true"},"#",-1),Ca={href:"https://github.com/NOArgsConstructor",target:"_blank",rel:"noopener noreferrer"},Aa=n("p",null,"使用这个注解会自动为对象生成无参构造函数。它也是作用在实体类上面的。",-1),Da={id:"_7-5-allargsconstructor",tabindex:"-1"},ja=n("a",{class:"header-anchor",href:"#_7-5-allargsconstructor","aria-hidden":"true"},"#",-1),za={href:"https://github.com/AllArgsConstructor",target:"_blank",rel:"noopener noreferrer"},Ta=n("p",null,"使用这个注解会自动为对象生成全参的构造函数。它也是作用在实体类上面的。",-1),Ea={id:"_7-6-equalsandhashcode",tabindex:"-1"},Ua=n("a",{class:"header-anchor",href:"#_7-6-equalsandhashcode","aria-hidden":"true"},"#",-1),Ia={href:"https://github.com/EqualsAndHashCode",target:"_blank",rel:"noopener noreferrer"},Ma=n("p",null,"使用这个注解会自动重写equals和HashCode方法。它也是作用在实体类上面的。",-1),Ba={id:"_7-7-tostring",tabindex:"-1"},La=n("a",{class:"header-anchor",href:"#_7-7-tostring","aria-hidden":"true"},"#",-1),Ra={href:"https://github.com/ToString",target:"_blank",rel:"noopener noreferrer"},Oa=e('<p>使用这个注解会自动重写ToString方法。它也是作用在实体类上面的。</p><h4 id="总结-现在我们项目里面的javabean实体类基本上都是会用到lombok的注解-它方便了我们的开发。是很有用的注解。" tabindex="-1"><a class="header-anchor" href="#总结-现在我们项目里面的javabean实体类基本上都是会用到lombok的注解-它方便了我们的开发。是很有用的注解。" aria-hidden="true">#</a> 总结:现在我们项目里面的javabean实体类基本上都是会用到lombok的注解,它方便了我们的开发。是很有用的注解。</h4><h2 id="阿里导出excl工具的使用" tabindex="-1"><a class="header-anchor" href="#阿里导出excl工具的使用" aria-hidden="true">#</a> 阿里导出excl工具的使用</h2><p>欢迎使用ShowDoc！</p><p>https://alibaba-easyexcel.github.io/quickstart/api.html</p><p>https://www.yuque.com/easyexcel/doc/easyexcel</p><p>1.模板导出</p><p>2.注解导出</p><p>3.导入</p><h2 id="通用mapper的使用" tabindex="-1"><a class="header-anchor" href="#通用mapper的使用" aria-hidden="true">#</a> 通用mapper的使用</h2><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>我们在进行Mybatis开发的时候,很多的时候会遇到一个问题。那就是有一些同样类似的功能,但是我们要写重复大量的SQL。除了一些业务逻辑的SQL之外,我们还要写大量增删改查的SQL。而且当我们数据库字段改变的时候,对应的SQL以及实体类都是需要我们改变的。所以这样就会使我们的开发效率变得很低,并且代码冗余量也会很多。这个时候我们就要使用到通用mapper来解决我们的问题。 通用mapper的依赖:我们可以很清晰的看到每一个方法它的作用。当我们继承通用BaseMapperZrd之后,我们就可以直接调用这些方法。而不需要单独的去写一条sql。</p><h6 id="existswithprimarykeymapper-t-根据主键id查询是否有这一条实体数据" tabindex="-1"><a class="header-anchor" href="#existswithprimarykeymapper-t-根据主键id查询是否有这一条实体数据" aria-hidden="true">#</a> <code>ExistsWithPrimaryKeyMapper&lt;T&gt;</code>:根据主键id查询是否有这一条实体数据</h6><h6 id="selectallmapper-t-查询所有的实体数据" tabindex="-1"><a class="header-anchor" href="#selectallmapper-t-查询所有的实体数据" aria-hidden="true">#</a> <code>SelectAllMapper&lt;T&gt;</code>:查询所有的实体数据</h6><h6 id="selectbyprimarykeymapper-根据主键id查询出这条实体数据" tabindex="-1"><a class="header-anchor" href="#selectbyprimarykeymapper-根据主键id查询出这条实体数据" aria-hidden="true">#</a> <code>SelectByPrimaryKeyMapper</code>:根据主键id查询出这条实体数据</h6><h6 id="selectcountmapper-根据传入条件查询有多少条实体数据" tabindex="-1"><a class="header-anchor" href="#selectcountmapper-根据传入条件查询有多少条实体数据" aria-hidden="true">#</a> <code>SelectCountMapper</code>:根据传入条件查询有多少条实体数据</h6><h6 id="selectmapper-t-根据传入条件查询出所有的实体数据" tabindex="-1"><a class="header-anchor" href="#selectmapper-t-根据传入条件查询出所有的实体数据" aria-hidden="true">#</a> <code>SelectMapper&lt;T&gt;</code>:根据传入条件查询出所有的实体数据</h6><h6 id="selectonemapper-t-根据传入条件查询出单条实体数据" tabindex="-1"><a class="header-anchor" href="#selectonemapper-t-根据传入条件查询出单条实体数据" aria-hidden="true">#</a> <code>SelectOneMapper&lt;T&gt;</code>:根据传入条件查询出单条实体数据</h6><p><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edcace6a79d9.png" alt="img" loading="lazy"> 进入到我们的DAO层,我们可以看到我们的mapper文件继承了我们通用BaseMapperZrd。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edca8dde41a5.png" alt="img" loading="lazy"> 我们按住Ctrl点进BaseMapperZrd里面去,这里我们可以看到底层有各种已经被封装好了的方法。当我们继承了这个通用mapper以后,我们直接调用这个方法而不需要我们自己去重写sql,这可以为我们提供很大的方便。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edcad69cf27f.png" alt="img" loading="lazy"></p><p>实例代码:我们现在要查出客户信息,我们通过<code>SelectMapper&lt;T&gt;</code>这个方法直接来查出客户的信息。首先我们把Controller,Service,Dao层都创建好。然后mapper文件继承BaseMapperZrd这个工具类。然后在用客户信息mapper的实现类直接调用<code>selectMapper&lt;T&gt;</code>这个方法就可以查出客户信息。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edcb85895582.png" alt="img" loading="lazy"> 这是返回的结果 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-07/5edcb879ad659.png" alt="img" loading="lazy"> 所以我们就利用通用mapper实现了这个功能。其他的各种方法操作都是和这个类似的。</p><h4 id="总结-通用mapper的原理是通过反射获取实体类的信息-构造出相应的sql-因此我们只需要维护好实体类即可-对于应付复杂多变的需求提供了很大的便利。上文叙述的只是通用mapper的简单用法-在实际项目中-还是要根据业务-在通用mapper的基础上封装出粒度更大、更通用、更好用的方法。" tabindex="-1"><a class="header-anchor" href="#总结-通用mapper的原理是通过反射获取实体类的信息-构造出相应的sql-因此我们只需要维护好实体类即可-对于应付复杂多变的需求提供了很大的便利。上文叙述的只是通用mapper的简单用法-在实际项目中-还是要根据业务-在通用mapper的基础上封装出粒度更大、更通用、更好用的方法。" aria-hidden="true">#</a> 总结:通用Mapper的原理是通过反射获取实体类的信息，构造出相应的SQL，因此我们只需要维护好实体类即可，对于应付复杂多变的需求提供了很大的便利。上文叙述的只是通用Mapper的简单用法，在实际项目中，还是要根据业务，在通用Mapper的基础上封装出粒度更大、更通用、更好用的方法。</h4><h2 id="代码质量" tabindex="-1"><a class="header-anchor" href="#代码质量" aria-hidden="true">#</a> 代码质量</h2><p>欢迎使用ShowDoc！ 1.idea集成p3c插件</p><p>2.idea扫描代码</p><h2 id="_3-p3c代码-检查修复记录" tabindex="-1"><a class="header-anchor" href="#_3-p3c代码-检查修复记录" aria-hidden="true">#</a> 3.p3c代码 检查修复记录</h2>',25),Na=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9e1447891.png",alt:"img",loading:"lazy"},null,-1),Ha=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda2e214475.png",alt:"img",loading:"lazy"},null,-1),Fa=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda520f0474.png",alt:"img",loading:"lazy"},null,-1),Xa=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda5b099f15.png",alt:"img",loading:"lazy"},null,-1),Ja=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda62116ef4.png",alt:"img",loading:"lazy"},null,-1),Ka={href:"https://github.com/Transactional",target:"_blank",rel:"noopener noreferrer"},Ga=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda7917e704.png",alt:"img",loading:"lazy"},null,-1),Va=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda849c9f03.png",alt:"img",loading:"lazy"},null,-1),Qa=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edda9190c9f0.png",alt:"img",loading:"lazy"},null,-1),Wa=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddaa1eaaa7e.png",alt:"img",loading:"lazy"},null,-1),Ya=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddaf5a26a47.png",alt:"img",loading:"lazy"},null,-1),Za=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddb00b3ded9.png",alt:"img",loading:"lazy"},null,-1),$a=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddb2507218e.png",alt:"img",loading:"lazy"},null,-1),ns=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddb2e6211c9.png",alt:"img",loading:"lazy"},null,-1),as=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddb676e1717.png",alt:"img",loading:"lazy"},null,-1),ss=n("img",{src:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5eddb846106bd.png",alt:"img",loading:"lazy"},null,-1),ts=e(`<h2 id="mysql数据库的索引" tabindex="-1"><a class="header-anchor" href="#mysql数据库的索引" aria-hidden="true">#</a> MYSQL数据库的索引</h2><h2 id="mysql数据库的索引-1" tabindex="-1"><a class="header-anchor" href="#mysql数据库的索引-1" aria-hidden="true">#</a> MYSQL数据库的索引</h2><p>数据库的索引的本质实际是一种数据结构,它的目的是为了加快对数据的查询。是帮助Mysql高效获取数据的数据结构。Mysql数据库有几个基本的索引类型:普通索引,唯一索引,主键索引,全文索引,Mysql常用的存储引擎是innodb,它采用的是B+Tree和Hash索引的结构。</p><h3 id="数据库的索引-唯一索引-主键索引-聚集索引-普通索引-非聚集所以-全文索引。" tabindex="-1"><a class="header-anchor" href="#数据库的索引-唯一索引-主键索引-聚集索引-普通索引-非聚集所以-全文索引。" aria-hidden="true">#</a> 数据库的索引:唯一索引,主键索引(聚集索引),普通索引(非聚集所以),全文索引。</h3><p>唯一索引:一个索引值不能对应多行的数据,所以不能有重复的索引值。我们在创建这种索引的时候系统会去检查是否有重复的索引值,而且我们每次插入和更新都会进行检查。例如我们数据库里面的身份证号码使用的就是唯一索引。</p><p>主键索引:它的索引的顺序和磁盘上面存储数据的顺序是一致的,一个表当中只能有一个主键索引,例如我们创建的主键递增id使用的就是主键索引。</p><p>普通索引:它所存储的数据和索引的顺序是无关的。它的索引的值是可以相同的。一个表可以创建多个普通索引。例如我们创建的name,address,interest这些字段就是普通的索引。</p><p>全文索引:全文索引首先对数据库的数据进行了分词,并且对它们建立了索引。我们在查询的时候就可以对这些分词进行查询从而获得数据。</p><p>一般情况下数据库的主键都是主键索引,而且一张表只能有一个主键,一个表可以有多个普通索引。当我们需要对某一个字段进行唯一标识的时候,我们就使用唯一索引。主键索引的插入速度比普通索引要慢很多。索引的确可以让我们对于数据的查询变得简单,但索引也需要空间来存储,也需要定期的维护。每当表中数据增减的时候索引就会发生变化。所以当我们表记录太少或者经常进行增删改的时候不必要使用索引。</p><h3 id="mysql一般使用的索引结构是hash索引和b-tree索引。" tabindex="-1"><a class="header-anchor" href="#mysql一般使用的索引结构是hash索引和b-tree索引。" aria-hidden="true">#</a> Mysql一般使用的索引结构是Hash索引和B+Tree索引。</h3><p>B+树是一种多路平衡查询树,所以说它的节点都是有序的,左节点小于父节点,右节点大于父节点。所以在做范围查询的时候不需要去扫描全表。Hash索引底层是哈希表,哈希表是一种以key-value存储数据的结构,它的数据存储是没有顺序的,所以它查询范围数据的时候是需要进行全表的扫描。因此哈希索引只适用于等值查询的场景。在了解B+Tree之前,我们先来了解二叉树,平衡二叉树,B树。</p><p>二叉树:二叉树是一种数据结构,它的每个父节点只能有2个子节点。最顶层的节点被称为根节点。有一个或者多个子节点的被称为父节点。比父节点小的会放在父节点的左边,比父节点大的会放在父节点的右边。二叉树的每一个节点都会存储数据。二叉树它查询的时间复杂度为logN。它的数据排序也是非常的有序的。它对于数据的存储有一定的帮助。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1aa4439241.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是它也是有一定的缺陷的,有的时候二叉树会出现一直往左或者一直往右的情况。下面的二叉树就出现了一直向右的情形。而且二叉树的高度会显得非常的高。所以它也不适合做主要存储。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1aa575b0c7.png" alt="img" loading="lazy"></p><p>平衡二叉树:平衡二叉树在二叉树的基础上进行了改良,它的左右子节点的高度最大是1。但是它也存在树的高度过高的问题。查询起来的时间复杂度也是很大的。</p><p>B树:B树属于多平衡多路查找树,它也是按照关键字的递增进行排列的。遵循的原则也是左小右大。B树的每一个节点都存储数据,它的所有的节点组成了这棵树。它的2个节点可以分为3个区间,n个节点可以分为n+1个区间。小于左节点的就在P1,大于左节点小于右节点的就在P2,大于右节点的就在P3,B数据的高度相比二叉树就会低很多。所以B树可以存储很多的数据,数据的查询起来也是相对的方便一些。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1aa6787131.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>B+树:B+树是在B树的基础上进行了增强,它的每一个节点都不存数据了。它的所有数据都存在叶子节点上面。他们都经过了一系列的排序,数据排序也是十分的有规则,对于数据的查找也是更加的方便。目前MYSQL数据库一般都是用的B+树索引。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1aa6f63705.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>下面我们就来详细的了解一下Hash索引和B+树的索引 Hash索引的检索效率非常的高,索引的检索可以一次定位,它不必从根节点到枝节点。所以它的效率远高于B+Tree。但是Hash索引也有很多的弊端。例如: 1.Hash索引只能满足=,IN,<code>&lt;=&gt;</code>查询,不能使用范围查询。 2.因为它经过哈希计算得到等值的。而且它还不能进行查询后的排序。 3.有可能大量的Hash值经过计算是相等的。所以这也会造成一些的问题。</p><p>数据库的索引结构现在大多数都是采用的B+Tree数据结构的形式存在的,他提高了我们查询数据的效率。所以我们在需要的时候可以建立合适的索引来帮助我们查询数据。</p><h2 id="查询列表-翻译-导出文档" tabindex="-1"><a class="header-anchor" href="#查询列表-翻译-导出文档" aria-hidden="true">#</a> 查询列表 翻译 导出文档</h2><h2 id="查询列表-翻译-导出文档-1" tabindex="-1"><a class="header-anchor" href="#查询列表-翻译-导出文档-1" aria-hidden="true">#</a> 查询列表 翻译 导出文档</h2><p>当我们要导出某一个信息列表的时候,我们需要先查询出这个集合,然后翻译和导出。</p><p>首先我们查出我们所需要的这个集合: <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1ab81adca9.png" alt="img" loading="lazy"></p><p>然后我们使用父类BaseController里面的translateBeanList的这个方法，把我们查出来的List和它实体的类型当做参数给传入进去。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1ab9940fca.png" alt="img" loading="lazy"></p><p>translateBeanList这个方法经过逻辑判断之后再调用valid这个方法。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1aba1c3ca8.png" alt="img" loading="lazy"></p><p>Valid这个方法是单实体翻译工具类的一个方法。它有2个参数,被翻译的实体和实体的类型。首先它用ReflectUtil.getFields(clazz);这个方法来获得实体的每一个字段的属性。经过一系列的判断,看它到底属于哪种类型。再将最后转换的List进行返回。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1abb8e0dd9.png" alt="img" loading="lazy"></p><p>最后在使用EasyExcel.write将数据导出成excl表格 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-23/5ef1abcaa531e.png" alt="img" loading="lazy"></p><h2 id="spring-boot入门" tabindex="-1"><a class="header-anchor" href="#spring-boot入门" aria-hidden="true">#</a> Spring Boot入门</h2><h1 id="spring-boot入门-1" tabindex="-1"><a class="header-anchor" href="#spring-boot入门-1" aria-hidden="true">#</a> Spring Boot入门</h1><h2 id="_1-spring-boot简介" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot简介" aria-hidden="true">#</a> 1. Spring Boot简介</h2><p>Spring Boot框架的设计初衷是让开发者快速搭建Spring项目，从Spring的发展历程来看，曾经开发者不仅需要手动组装Spring下的详细框架内容，还需要在POM文件中添加dependency，这对于结构复杂的项目是很繁琐的工作，Spring Boot的诞生就是为了解决这个问题。有个例子是说搭建这些框架就像是组装电脑的硬件，而配置Spring的XML或Java注解则是安装驱动的过程。Spring Boot就像是一款驱动精灵，他提供多种硬件的驱动程序，自动匹配硬件的驱动版本，自动设置硬件的默认参数。Spring Boot本身并没有限定应用程序所用的框架，而只是提供了多种框架的starters。 Spring Boot的Boot指的就是引导启动的意思，它强调约定大于配置（Convention over Configuration），简化了大量的XML配置，用官网文档上的话说就是“you can just run”</p><h2 id="_2-spring-boot-项目生成" tabindex="-1"><a class="header-anchor" href="#_2-spring-boot-项目生成" aria-hidden="true">#</a> 2. Spring Boot 项目生成</h2><p>项目使用IDEA为开发IDE，所以用IDEA生成Spring Boot作为例子。 1.打开idea，创建新项目，选择Spring initializer <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-15/5f0ef147e87b5.png" alt="img" loading="lazy"> 2.然后在下一个界面可以设置项目的Group和Artifact,groupId和artifactId是maven管理项目包时用作区分的字段，就像是地图上的坐标。groupId分为几个字段，例如com.piggy，前面的com叫”域”，org通常是非赢利组织，而com是商业公司，后面的是你自己起的域名。artifactId一般是项目名或者模块名。它们的作用是包名根目录=groupId+artifactId，这样可以避免重复 <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-15/5f0ef22921d59.png" alt="img" loading="lazy"> 3.下一步需要我们选择项目需要的dependencies，例如我们项目需要MyBatis的框架，就在SQL栏目下选择了MyBatis Framework <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-15/5f0ef2ce1eca3.png" alt="img" loading="lazy"> 4.最后设置好项目名和路径就可以生成项目了 <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-15/5f0ef3790033d.png" alt="img" loading="lazy"></p><h2 id="_3-spring-boot项目结构" tabindex="-1"><a class="header-anchor" href="#_3-spring-boot项目结构" aria-hidden="true">#</a> 3. Spring Boot项目结构</h2><p>生成好Spring Boot项目后，我们可以看到整体的项目结构，以我们的项目代码为例： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-15/5f0ef59b7080f.png" alt="img" loading="lazy"> 其中，src文件夹下的java目录是程序开发以及主程序入口，而resources目录则是配置文件。这里还需要注意几个常见的文件目录，在本项目中也有体现，首先是java目录下的：</p><ul><li>domain：实体类，存放实体（Entity）</li><li>service：数据服务层，通常存放业务类代码</li><li>mapper：用于存放Mappper（映射）接口文件</li><li>controller：控制器类，用于存放页面控制代码</li><li>util：工具类</li></ul><p>然后是resource目录下的：</p><ul><li>i18n：本身是存放国际化信息文件夹，项目中存放了message的属性信息</li><li>excl：存放excel表格文件</li><li>mybatis：存放了Mapper的XML文件（实现）</li><li>vm：存放了velocity文件（页面模板引擎）</li></ul><p>最后，在pom.XML文件中我们可以得到项目的所有dependencies，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        &lt;!-- SpringBoot 核心包 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- SpringBoot 测试 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的spring-boot-starter-*文件可以快速构建所需的denpendency，这也是spring boot快捷构建依赖的地方</p><h2 id="_4-工作基本原理" tabindex="-1"><a class="header-anchor" href="#_4-工作基本原理" aria-hidden="true">#</a> 4. 工作基本原理</h2><p>在Spring Boot继承的MyBatis框架下，分析一下数据库的增删改查到与页面的交互的工作流程，以SysConfig（系统参数）类相关代码为例： 首先是SysConfig类，这个类继承了BasicEntity，是系统参数的实体对象，类中包含了SysConfig实体的属性，不做过多赘述。 然后是ISysConfigService接口，这个接口属于系统参数的服务层，主要定义了针对这个实体的所有种类业务（摘录源码之后删去了注释，实际开发不能没有注释！）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISysConfigService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SysConfig</span> <span class="token function">selectConfigById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> configId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectConfigByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> configKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysConfig</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectConfigList</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertConfig</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateConfig</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteConfigById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> configId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteConfigByIds</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">checkConfigKeyUnique</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口对应的实现是SysConfigServiceImp类，在这个类中，首先声明了一个SysConfigMapper对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SysConfigMapper</span> configMapper<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,48),es={href:"https://github.com/Autowired",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://github.com/Autowired",target:"_blank",rel:"noopener noreferrer"},os=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询参数配置信息
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">configId</span> 参数配置ID
     * <span class="token keyword">@return</span> 参数配置信息
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SysConfig</span> <span class="token function">selectConfigById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> configId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SysConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setConfigId</span><span class="token punctuation">(</span>configId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configMapper<span class="token punctuation">.</span><span class="token function">selectConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见服务层的实际业务逻辑是由mapper里的方法完成的。我们再看SysConfigMapper接口是属于数据层，也就是DAO层，这个接口定义了最终针对数据库的操作，代码如下（同样删去了注释，实际开发一定要有注释）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysConfigMapper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SysConfig</span> <span class="token function">selectConfig</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysConfig</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectConfigList</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">SysConfig</span> <span class="token function">checkConfigKeyUnique</span><span class="token punctuation">(</span><span class="token class-name">String</span> configKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertConfig</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateConfig</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteConfigById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> configId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteConfigByIds</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而mapper接口具体的实现则在SysConfigMapper.XML文件中。 这里先总结一下Spring Boot中各层的关系，首先Controller层是直接和前端交互的层级，而它会调用service层，在service层中会提供controller层所需要的方法（接口和其实现），之后service层为了实现这些方法则会调用dao层，也就是mapper层，他的方法是针对数据库操作的，基本用到的就是增删改查。它只是个接口，只有方法名字，具体实现在mapper.xml文件中。</p><h2 id="_5-关于mapper的实现-mapper-xml文件" tabindex="-1"><a class="header-anchor" href="#_5-关于mapper的实现-mapper-xml文件" aria-hidden="true">#</a> 5. 关于mapper的实现（***Mapper.XML文件）</h2><p>刚才在4中所述的各层代码其实可以自动生成，但是mapper的实现由于其灵活性需要手动编写，在原始的MyBatis使用中我们可以通过注解或者XML文件的方式实现mapper，但是注解方式应对复杂的sql语句非常吃力，在本项目中我们主要使用XML文件进行mapper的实现，通过分析SysConfigMapper.XML文件梳理一下知识点： 首先是显式声明了这个mapper后面需要用到的ResultMap，代码如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysConfig<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysConfigResult<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span>     <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configId<span class="token punctuation">&quot;</span></span>      <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>config_id<span class="token punctuation">&quot;</span></span>      <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configName<span class="token punctuation">&quot;</span></span>    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>config_name<span class="token punctuation">&quot;</span></span>    <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configKey<span class="token punctuation">&quot;</span></span>     <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>config_key<span class="token punctuation">&quot;</span></span>     <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configValue<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>config_value<span class="token punctuation">&quot;</span></span>   <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configType<span class="token punctuation">&quot;</span></span>    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>config_type<span class="token punctuation">&quot;</span></span>    <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createBy<span class="token punctuation">&quot;</span></span>      <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_by<span class="token punctuation">&quot;</span></span>      <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createTime<span class="token punctuation">&quot;</span></span>    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_time<span class="token punctuation">&quot;</span></span>    <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateBy<span class="token punctuation">&quot;</span></span>      <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update_by<span class="token punctuation">&quot;</span></span>      <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateTime<span class="token punctuation">&quot;</span></span>    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update_time<span class="token punctuation">&quot;</span></span>    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中type指定了被映射到这个ResultMap上的JavaBean，也就是SysConfig类，而id指定了这个ResultMap的名称，在之后可以被映射语句的resultMap属性调用。之后的内容是JavaBean的属性，id属性代表的是主键属性。实际上除了这样显式配置ResultMap，我们可以直接在映射语句中指定resultType为对应的JavaBean，例如： \`\` 在声明了ResultMap后，我们可以写一些基本的SQL语句，这些语句是可以被反复调用的，一般是查询语句的开头或者是基本的条件语句，例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectConfigVo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select config_id, config_name, config_key, config_value, config_type, create_by, create_time, update_by, update_time, remark from sys_config
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 查询条件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlwhereSearch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configId !=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                and config_id = #{configId}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configKey !=null and configKey != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                and config_key = #{configKey}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sql元素代表了可重用语句块，避免了我们编写大量重复代码，其中id指定了语句块的名字，在之后的具体映射语句中得以调用。 之后的主要内容就是映射语句的具体实现了，这也是Mapper的主要目的，我们尤其需要注意动态SQL语句的使用，这是MyBatis的强大之处之一，它解决了传统JDBC中拼接语句的复杂问题，我们用一个例子来看：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectConfigList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysConfig<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysConfigResult<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectConfigVo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configName != null and configName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                AND config_name like concat(&#39;%&#39;, #{configName}, &#39;%&#39;)
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configType != null and configType != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                AND config_type = #{configType}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configKey != null and configKey != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                AND config_key like concat(&#39;%&#39;, #{configKey}, &#39;%&#39;)
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beginTime != null and beginTime != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开始时间检索 --&gt;</span>
                and date_format(create_time,&#39;%y%m%d&#39;) &amp;= date_format(#{beginTime},&#39;%y%m%d&#39;)
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>endTime != null and endTime != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 结束时间检索 --&gt;</span>
                and date_format(create_time,&#39;%y%m%d&#39;) &lt;= date_format(#{endTime},&#39;%y%m%d&#39;)
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个映射语句中首先是通过select属性声明了语句的类型，之后的id属性代表这个映射语句的名称，这个名称应该和mapper接口中的方法名完全一致，parameterType指定了这个语句中会传入的参数类型，这个属性是可选的，因为MyBatis会自动判断参数的类型，最后resultMap属性是刚才说到的显示声明的ResultMap名称，定义了这个语句的返回类型。在语句主体部分使用了之前说到的可重用sql语句块，我们通过include调用对应的refid达到了这个功能，之后在where属性中是语句的主要条件语句，我们这里使用了最基本的动态语句，也就是if关键字，这个关键字可以让我们在where中根据条件自由拼接条件，比如在这段代码中我们就判断属性是否空来判断条件是否需要加上此属性。另外，使用where元素是因为where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除，这样可以避免语句的条件为空时WHERE关键字仍存在的问题。和select语句一样，insert，update和delete也有对应的属性，这里再用一个insert的例子进行说明：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertConfig<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysConfig<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        insert into sys_config (
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configName != null and configName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>config_name,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configKey != null and configKey != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>config_key,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configValue != null and configValue != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>config_value,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configType != null and configType != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>config_type,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createBy != null and createBy != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>create_by,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remark != null and remark != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>remark,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
             create_time
        )values(
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configName != null and configName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{configName},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configKey != null and configKey != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{configKey},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configValue != null and configValue != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{configValue},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configType != null and configType != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{configType},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createBy != null and createBy != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{createBy},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remark != null and remark != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>#{remark},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
             sysdate()
        )
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个insert语句的基本结构，同样用到了大量的if属性进行语句拼接，其他的update和delete属性代表对应的映射语句语法也高度相似。通过这些映射语句，我们就实现了mapper接口中声明的方法，后端对于数据库的增删改查业务也得到了具体的实现。</p><h2 id="根据p3c修改代码规范及思考" tabindex="-1"><a class="header-anchor" href="#根据p3c修改代码规范及思考" aria-hidden="true">#</a> 根据P3C修改代码规范及思考</h2><h1 id="根据acg修改代码规范及思考" tabindex="-1"><a class="header-anchor" href="#根据acg修改代码规范及思考" aria-hidden="true">#</a> 根据ACG修改代码规范及思考</h1><ul><li><p>对之前的项目代码进行了编码规范扫描，根据Alibaba Code Guidelines的指导进行了修改，这里记录一下修改的过程和心得。</p><h2 id="命名风格" tabindex="-1"><a class="header-anchor" href="#命名风格" aria-hidden="true">#</a> 命名风格</h2></li></ul>`,17),cs=n("li",null,[n("p",null,"首先是基本的UpperCamelCase和lowerCamelCase规范，ACG要求类名使用UpperCamelCase风格而方法名、参数名、成员变量和属性变量使用lowerCamelCase风格，这个规范一般没有什么争议，唯一可能出问题的地方在一些缩写是否大写的争议，例如在类名中许多时候我们会习惯使用HTTPServletMapping这种名称，它并不影响我们理解，我的想法是由于驼峰命名法的主要目的就是方便我们分割英文单词，它严格要求每一个有实际意义的英文单词为一个分割，使用HttpServletMapping这种命名规范更符合这一思想，也使得我们的命名更加统一，因此我将项目代码中所有的命名规范改成了完全一致。（主要是缩写单词）")],-1),is=n("li",null,[n("p",null,"关于常量的命名，ACG的要求是常量命名全大写，每个单词用下划线分割，力求语义表达完整清楚，例如MAX_STOCK_COUNT = 1000这种命名就是合乎规范的。这个命名规范也没有什么争议，由于常量在声明后基本不会修改，因此我们更应该在声明的时候就将它的含义表达清楚，避免在之后的编码过程中引发歧义。我将项目代码中忽略了这一规范的地方全部修改成了标准命名规范，不再赘述。")],-1),ls=e(`<p>关于数组的中括号位置：ACG要求在声明一个数组的时候，我们需要把中括号放在数组类型后面而不是数组名后面，尽管String a[]也能成功的定义一个数组，但是我们应该使用String[] a这种更规范的方式进行定义，因为中括号是数组类型的一部分。</p><h2 id="常量定义" tabindex="-1"><a class="header-anchor" href="#常量定义" aria-hidden="true">#</a> 常量定义</h2><p>魔法值相关问题：魔法值是指的是未经定义的常量，这在代码开发过程中其实使用比较广泛，例如在条件语句中写的<code>if (i &lt;= 255)</code>。魔法值是否需要修改也有很大的争议，毕竟很多时候使用魔法值非常方便，然而实际上这些魔法值通常是有意义的值，也许是数组的长度，也许是某种定义的常量如ip地址的范围，如果我们使用魔法值来进行判断，在维护中很有可能忘记它的实际意义而造成阻塞（尤其是另一个人对代码进行维护时），如果我们将魔法值定义为有实际意义名称的常量，在之后阅读代码的过程中就会方便很多，这里我用我的一些修改方式进行说明，首先修改前的代码片段如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
    <span class="token constant">BASE_64_ALPHABET</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后的效果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> <span class="token constant">FIRST_ALPHABET</span> <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> <span class="token constant">LAST_ALPHABET</span> <span class="token operator">=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token constant">LAST_ALPHABET</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token constant">FIRST_ALPHABET</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token constant">BASE_64_ALPHABET</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改的原理非常简单，就是将魔法值命名成常量，相当于给它取了个名字，这个例子也许还不是很典型，毕竟A和Z的含义很好分辨，我也将其命名为了第一个字母和最后一个字母，有时我们会面对一个数字，如4394967295，如果我们不命名而直接使用这个数字，我们可能当时并不能理解这是什么，实际上这个数字是IPV4的最大数（255.255.255.255）的十进制表示，如果我们将其提前命名成MAX_DECIMAL_FOR_IPV4，那么我们在语句中就能很快理解数字的含义从而方便代码的后期维护。</p><h2 id="注释问题" tabindex="-1"><a class="header-anchor" href="#注释问题" aria-hidden="true">#</a> 注释问题</h2><p>注释问题已经强调过很多遍了，这个问题在项目开发中非常重要，它直接决定了团队合作的效率，在修改过程中我主要发现了如下几个问题： 1.所有的抽象方法(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能，对子类的实现要求，或者调用注意事项，也要一并说明。由于抽象方法本身没有具体的实现，我们必须明确定义它的功能，这样方便了之后的具体实现，否则光靠命名很多时候会产生歧义。 2.所有的枚举类型字段必须要有注释，说明每个数据项的用途。这一点没有什么好争论的，完全按照要求进行了修改补充。 3.方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/ /注释，注意与代码对齐。这一点主要是统一注释规范，保证团队合作中阅读注释的习惯也高度统一。 4.类、类属性、类方法的注释必须使用javadoc规范，使用/** 内容* /格式，不得使用//xxx方式和/<em>xxx</em>/方式。 说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><h2 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题" aria-hidden="true">#</a> 其他问题</h2>`,10),us={href:"https://github.com/Transaction",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/Transactional",target:"_blank",rel:"noopener noreferrer"},ds=n("code",null,"@Transactional(rollbackFor = Exception.class)",-1),ks=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Negative example:</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
<span class="token comment">//Positive example:</span>
 <span class="token keyword">boolean</span> existed <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>existed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.集合初始化时，指定集合初始值大小。 说明：HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可。这一步的修改我暂时将所有的大小指定为了默认值。</p>`,2),ms=e(`<h2 id="分析项目代码中的基类" tabindex="-1"><a class="header-anchor" href="#分析项目代码中的基类" aria-hidden="true">#</a> 分析项目代码中的基类</h2><h1 id="项目代码中基类的使用" tabindex="-1"><a class="header-anchor" href="#项目代码中基类的使用" aria-hidden="true">#</a> 项目代码中基类的使用</h1><p>在本项目代码中，很多地方使用了以Base开头的基类（如BaseEntity、BaseMapper等），这些类提供了通用方法的高度集成，每一种实际业务可以通过继承这些类来快速构建基本增删改查等功能，在生成的代码中得到了高频率的使用，这里根据每一种基类进行分析。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>这些分析都是建立在阅读当前代码（base-com项目）的基础上的，而分析的代码并不保证是最终正确的代码（因为模板也在不断修改），因此就算思路没有问题，很多细节可能还需要推敲。写在这里的内容仅供参考，作为学习记录随时修改更新。</p><h2 id="baseentity和basezrdentity" tabindex="-1"><a class="header-anchor" href="#baseentity和basezrdentity" aria-hidden="true">#</a> BaseEntity和BaseZrdEntity</h2><p>这两个类是domain层使用的基类，其中BaseEntity是ruoyi系统提供的一种entity基类，其中包含一些实体必要的属性如创建者、创建时间等，而这些属性的维护是高度封装的，只要实体类继承了这个BaseEntity类就可以获得基本的属性而不用额外维护。相对应的BaseZrdEntity类是针对本项目进行了BaseEntity类的更改，主要是删去了一些不需要的属性。</p><h2 id="basecontroller" tabindex="-1"><a class="header-anchor" href="#basecontroller" aria-hidden="true">#</a> BaseController</h2><p>这个类是ruoyi系统提供的Controller层基本类，官方给出的注释是“web层通用数据处理”，它主要封装了Controller层需要用到的常见功能，例如分页和返回结果集，本项目还对这个类进行了一些修改使得其更贴合我们的业务需求。在这个类中主要被实际Controller层调用的有两个方法（其中getDataTable有一个重载），代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 设置请求分页数据
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PageDomain</span> pageDomain <span class="token operator">=</span> <span class="token class-name">TableSupport</span><span class="token punctuation">.</span><span class="token function">buildPageRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> pageNum <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> pageSize <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> orderBy <span class="token operator">=</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeOrderBySql</span><span class="token punctuation">(</span>pageDomain<span class="token punctuation">.</span><span class="token function">getOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> orderBy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 响应请求分页数据
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">TableDataInfo</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TableDataInfo</span> rspData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableDataInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> rspData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 响应请求分页数据
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">TableDataInfo</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Class</span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TableDataInfo</span> rspData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableDataInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list <span class="token operator">=</span> <span class="token function">translateBeanList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rspData<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> rspData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个方法在所有的Controller中得到了调用，我们逐个分析，首先是startPage()方法，这个方法主要是实现分页的功能，它使用了Mybatis分页插件 PageHelper。而getDataTable是返回结果数据的方法，它的返回值是一个TableDataInfo对象，这个类同样是ruoyi系统提供的，它是“表格分页数据对象”，主要属性有返回实例列表（<code>List&lt;?&gt;</code>），总行数，消息状态码和消息内容。在BaseController中还有这个方法的一个重载，这个重载允许传入一个类为参数，在这个方法重载中会对list的元素进行翻译，为他们配置传入类别的属性（或者说翻译单实体）。实际上BaseController中还有一个常被调用的方法是： <code>protected AjaxResult toAjax(int rows) {return rows &gt; 0 ? AjaxResult.success() : AjaxResult.error();}</code> 它主要用来返回操作结果（是否成功）。 看完了BaseController类之后我们可以看一下具体的Controller类是如何使用这些基本方法的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 获取参数配置列表
     */</span>
    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;@ss.hasPermi(&#39;system:config:list&#39;)&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TableDataInfo</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> config<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysConfig</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">selectConfigList</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码来自于继承了BaseController的SysConfigController类，这个方法的功能是获取一个参数和配置列表，因此它首先调用了基本的分页功能，然后通过getDataTable方法返回得到的数据结果，这样的代码块在几乎所有的Controller类中都有使用，高度的集成减少了很多重复代码，也让功能架构更加清晰</p><h2 id="ibaseservice-t-和-baseserviceimpl-t" tabindex="-1"><a class="header-anchor" href="#ibaseservice-t-和-baseserviceimpl-t" aria-hidden="true">#</a> <code>IBaseService&lt;T&gt;</code> 和 <code>BaseServiceImpl&lt;T&gt;</code></h2><p>这个两个类是Service层接口的基类和接口实现的基类，其中IBaseService类包含了Service层几乎所有的业务需求，包括数据库的这增删改查，可以满足Controller层几乎所有的业务场景，除了获取所有列表这一功能（因此在实际的Service层接口中除了继承这一基类，都进行了这个方法的声明），然而在这一点上存疑，因为实际上IBaseService类中也提供了类似的获取list方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">insertSelective</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">seletCommonList</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">selectCountByExample</span><span class="token punctuation">(</span><span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">T</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">T</span> <span class="token function">selectOneByExample</span><span class="token punctuation">(</span><span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByRowBounds</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByExampleAndRowBounds</span><span class="token punctuation">(</span><span class="token class-name">Example</span> example<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">deleteByExample</span><span class="token punctuation">(</span><span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">updateByExample</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">updateByExampleSelective</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">Example</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上这个接口的方法通常不会全部用到，但是它支持了Controller层所需要的所有方法。再看到实现接口的基类，也就是BaseServiceImpl，它的实现原理和其他ServiceImpl文件很相似，也是通过mapper来对每一种方法进行配置实现，而这里的mapper就是下一节会分析到的BaseMapper，所有和数据库交互的语句全部在mapper层中，之后会分析到。需要注意的是在这一层中，通过CommonValidation类对获得的结果进行了异常查询，如果返回数据存在问题会分析出指定的异常。</p><h2 id="basemapperzrd" tabindex="-1"><a class="header-anchor" href="#basemapperzrd" aria-hidden="true">#</a> BaseMapperZrd</h2><p>这个类是Mapper层接口的基类，实际上它是许多更底层Mapper基类的组合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseMapperZrd</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">MySqlMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">QueryMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">DeleteByIdsMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">DisableMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而这些底层Mapper下又继承了更多的基类，如果一直深挖到底，我们会发现这些接口的基类会一直继承到某个单一功能的mapper接口类，例如下面这个接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RegisterMapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SelectOneMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>
        type <span class="token operator">=</span> <span class="token class-name">BaseSelectProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        method <span class="token operator">=</span> <span class="token string">&quot;dynamicSQL&quot;</span>
    <span class="token punctuation">)</span>
    <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">T</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些接口都会调用一类Provider类的对象，如果我们查看这些Provider的代码，我们会发现它类似于SQL语句的构造器，例如这里的selectOne方法就是在BaseSelectProvider中进行实现的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEntityClass</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> entityClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">selectAllColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">fromTable</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">SqlHelper</span><span class="token punctuation">.</span><span class="token function">whereAllIfColumns</span><span class="token punctuation">(</span>entityClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里就是和数据库交互的最终实现了，一层层的基类都是相关联的，他们只是将每一层的代码高度集成，方便多种业务的开发，减少重复代码的同时也方便维护。我们可以再进一步去看集成了这个基层mapper类的具体mapper层接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 统计数据维护 Mapper接口
 *
 * <span class="token keyword">@author</span> ruoyi
 * <span class="token keyword">@date</span> 2020-06-29
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StatDataMataMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapperZrd</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatDataMata</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 描述： 查询统计数据维护列表
     * 备注：
     * 日期： 16:21 2020/6/29
     *
     * <span class="token keyword">@param</span> <span class="token parameter">statDataMata</span>
     * <span class="token keyword">@return</span> java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.ruoyi.project.system.domain.StatDataMata</span><span class="token punctuation">&gt;</span></span>
     **/</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatDataMata</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStatDataMataList</span><span class="token punctuation">(</span><span class="token class-name">StatDataMata</span> statDataMata<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里还是刚才说到的存疑点，Mapper接口层几乎所有需要的功能都集成到了BaseMapperZrd中，具体的Mapper层接口的代码也就非常简洁了。</p><h2 id="spring-framework学习" tabindex="-1"><a class="header-anchor" href="#spring-framework学习" aria-hidden="true">#</a> Spring Framework学习</h2><h1 id="spring-framework学习-1" tabindex="-1"><a class="header-anchor" href="#spring-framework学习-1" aria-hidden="true">#</a> Spring Framework学习</h1><p>Spring Boot解决了Spring框架的快速搭建和其他框架的集成，但是它的内核仍旧是Spring Framework，这里对Spring Framework的核心技术进行学习和记录，这份资料主要是入门级别的内容，从容易理解的例子入手进行分析。</p><h2 id="_1-ioc" tabindex="-1"><a class="header-anchor" href="#_1-ioc" aria-hidden="true">#</a> 1. IOC</h2><p>IOC的全程是Inversion of Control，也就是控制反转，只要提到Spring框架，这个词几乎永远是第一个被提出的，IOC实际上是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。在这里我们不妨先思考一下高耦合度会带来什么问题，这里引用一下知乎中的一个例子（原文链接：https://www.zhihu.com/question/23277575/answer/169698662 ） 假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子，那么转化为代码就是如下格式：</p><p><img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f15481185498.jpg" alt="img" loading="lazy"> 这段代码看起来并没有什么不妥，但是如果我们这个时候需要修改一个细节，比如说我们要在生成轮胎时输入它的尺寸，让轮胎尺寸是动态的而不是永远定为30，那么我们的代码就要这样改动： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f1548afc5521.jpg" alt="img" loading="lazy"> 由此我们可以看到，仅仅是为了修改轮胎的构造函数，这种设计却需要修改整个上层所有类的构造函数！在软件工程中，这样的设计几乎是不可维护的——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。所以我们需要进行控制反转（IoC），及上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制”。这里我们用构造方法传递的依赖注入方式重新写车类的定义： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f154986b7c34.jpg" alt="img" loading="lazy"> 如果进行了这样的修改，那么同样完成我们刚才所说的修改就非常方便了： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f154a0c213bd.jpg" alt="img" loading="lazy"> 我们只用修改轮胎类本身而不用维护其他类，这在实际开发过程中无疑是更适合不同组的协同合作和代码维护的。</p><hr><p>看完了这个例子，我们再回到Spring Framework来分析，Spring降低耦合度的方式同样是依赖注入，它提供了一个IOC容器，这个容器叫做ApplicationContext,它的顶层接口是BeanFactory，BeanFactory是一种低级的容器，它简单粗暴，可以理解为 HashMap：{Key - bean name，Value - bean object}，但它一般只有 get, put 两个功能，所以称之为“低级容器”。ApplicationContext则是一种高级容器，提供了更多的高级方法，而它本身也是一个接口且有三种实现，在我们的项目中Spring Boot默认使用的是AnnotationConfigApplication这一实现，它允许我们用注解去配置容器对象。当我们需要某种资源时，我们向IOC容器请求资源，而IOC容器就会返回给我们一个注入的资源。</p><hr>`,36),gs={href:"https://github.com/Autowired",target:"_blank",rel:"noopener noreferrer"},vs=e('<hr><p>我们再利用刚才的汽车例子来理解一下IOC容器的好处，针对上面的汽车例子代码，IOC容器实际上可以看作这个部分： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f1553dab6461.jpg" alt="img" loading="lazy"> 因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码。这是引入IoC Container的第一个好处。 IoC Container的第二个好处是：我们在创建实例的时候不需要了解其中的细节。在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f155431229b1.jpg" alt="img" loading="lazy"> 这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-20/5f15544af2bbe.jpg" alt="img" loading="lazy"> 我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。这对于我们管理许多复杂的Service类提供了便利，因为这些Service类往往用到了许多类作为它的底层，使用IOC容器让我们避免去熟悉这些类的构造方法而直接获取类的实例。</p><h2 id="_2-aop" tabindex="-1"><a class="header-anchor" href="#_2-aop" aria-hidden="true">#</a> 2. AOP</h2><p>首先是比较官方的定义：AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><hr><p>既然是面向切面编程，我们首先要理解什么是切面，在web层级设计中，web层-&gt;网关层-&gt;服务层-&gt;数据层，每一层之间是一个切面。编程中，对象与对象之间，方法与方法之间，模块与模块之间都是一个个切面。那么在Spring中切面又是什么呢？在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。比如登陆，增加数据，删除数据都叫核心业务，而性能统计，日志，事务管理等等就是周边功能，周边功能在 Spring 的面向切面编程AOP思想里，即被定义为切面，在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 “编织” 在一起，这就叫AOP。在Spring中，AOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><hr><p>对于AOP，我们首先需要了解它的一些基本术语，这一点在Spring的官方文档也有体现：</p><ul><li>Aspect（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</li><li>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li><li>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li><li>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</li><li>Target（目标对象）：织入 Advice 的目标对象.。</li><li>Weaving（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</li></ul><p>这里再次引用知乎中翻到的一个形象例子来辅助理解这些概念（原文链接：https://zhuanlan.zhihu.com/p/37497663 ）</p><hr><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系. 首先我们知道, 在 Spring AOP 中 Joint point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 Joint point, 通过 point cut, 我们就可以确定哪些 Joint point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, Joint point 就相当于 爪哇的小县城里的百姓,pointcut 就相当于 老王所做的指控, 即凶手是个男性, 身高约七尺五寸, 而 Advice 则是施加在符合老王所描述的嫌疑人的动作: 抓过来审问.为什么可以这样类比呢？</p><ul><li>Joint point ： 爪哇的小县城里的百姓: 因为根据定义, Joint point 是所有可能被织入 Advice 的候选的点, 在 Spring AOP中, 则可以认为所有方法执行点都是 Joint point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.</li><li>Pointcut ：男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 Advice, 但是我们并不希望在所有方法上都织入 Advice, 而 Pointcut 的作用就是提供一组规则来匹配joinpoint, 给满足规则的 joinpoint 添加 Advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据凶手是个男性, 身高约七尺五寸, 把符合条件的人抓起来. 在这里 凶手是个男性, 身高约七尺五寸 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.</li><li>Advice ：抓过来审问, Advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 Joint point 上的. 同理, 对比到我们的例子中, 抓过来审问 这个动作就是对作用于那些满足 男性, 身高约七尺五寸 的爪哇的小县城里的百姓.</li><li>Aspect:：Aspect 是 point cut 与 Advice 的组合, 因此在这里我们就可以类比: “根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问” 这一整个动作可以被认为是一个 Aspect.</li></ul><p>然后来看一看Spring官方文档给出的Advice的类型：</p><ul><li>Before advice: 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li><li>After returning advice: 在一个 join point 正常返回后执行的 advice</li><li>After throwing advice: 当一个 join point 抛出异常后执行的 advice</li><li>After (finally) advice: 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li><li>Around advice:在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice. 它还负责选择是继续到join point，还是通过返回自己的返回值或抛出异常，从而简化advice的方法执行。</li></ul>',16),hs={href:"https://github.com/Aspect",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://github.com/Aspect",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://github.com/Component",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://github.com/Pointcut",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/annotation",target:"_blank",rel:"noopener noreferrer"},xs=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">// 配置织入点</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.ruoyi.framework.aspectj.lang.annotation.Log)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个类中会用到这些其他的注解，他们用来指定具体的advice： <code>@Before</code>：迁址通知，在连接点方法前调用 <code>@Around</code>：环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法 <code>@After</code>:后置通知，在连接点方法后调用 <code>@AfterReturn</code>:返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常 <code>@AfterThrowing</code>:异常通知，当连接点方法异常时调用 这些注解的用法实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**
     * 处理完请求后执行
     *
     * <span class="token keyword">@param</span> <span class="token parameter">joinPoint</span> 切点
     */</span>
    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">&quot;logPointCut()&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;jsonResult&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 拦截异常操作
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">joinPoint</span> 切点
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> 异常
     */</span>
    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;logPointCut()&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="easyexcel使用指南" tabindex="-1"><a class="header-anchor" href="#easyexcel使用指南" aria-hidden="true">#</a> EasyExcel使用指南</h2><h1 id="easyexcel使用指南-1" tabindex="-1"><a class="header-anchor" href="#easyexcel使用指南-1" aria-hidden="true">#</a> EasyExcel使用指南</h1><p>前言：在测试项目导出Excel文件的功能时发现导出的表格里包含了没有加注释的字段（例如我们不需要的id），为了解决这个问题去看了看EasyExcel的官方文档，才知道用<code>@ExcelIgnoreUnannotated</code>加在类前可以忽略当前类没有指定ExcelProperty的字段，这里把这个方法首先做个记录。</p><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1.简介</h2><p>EasyExcel是基于Java的读写Excel项目，来自于阿里的开源项目。本文基于官方文档介绍一下基本的使用方法。</p><h2 id="_2-读excel" tabindex="-1"><a class="header-anchor" href="#_2-读excel" aria-hidden="true">#</a> 2. 读Excel</h2><p>假设我们要读的Excel表格结构如下： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-22/5f17e63ee3e33.png" alt="img" loading="lazy"> 那么首先我们在Java中要建立对应的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上我们应该指定列的下表或者列名，我们通过<code>@ExcelProperty</code>注解来指定每一个字段读取Excel表格中的哪一列（列名或者是索引），类似下面的代码，注意示例代码只是为了展示所以同时使用了index和name，实际开发不要这样混用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexOrNameData</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配
     */</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据
     */</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;字符串标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;日期标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们要用到一个监听器，这个监听器类不能被Spring管理，因此每次涉及到读Excel的业务时都要new，如果使用Spring的话，那么构造函数就应该是有参构造函数，将Spring管理的类传进来，更加符合IOC的思路。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDataListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">DemoDataListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BATCH_COUNT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoDAO</span> demoDAO<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span>
        demoDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来
     *
     * <span class="token keyword">@param</span> <span class="token parameter">demoDAO</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token class-name">DemoDAO</span> demoDAO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>demoDAO <span class="token operator">=</span> demoDAO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 这个每一条数据解析都会来调用
     *
     * <span class="token keyword">@param</span> <span class="token parameter">data</span>
     *            one row value. Is is same as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnalysisContext</span><span class="token punctuation">#</span><span class="token function">readRowHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">context</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DemoData</span> data<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;解析到一条数据:{}&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token constant">BATCH_COUNT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 存储完成清理 list</span>
            list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 所有数据解析完成了 都会来调用
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span>
        <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;所有数据解析完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 加上存储数据库
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}条数据，开始存储数据库！&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demoDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;存储数据库成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是具体的读取代码，这里sheet方法没有写参数，实际上可以指定读取文件中哪一个sheet，我们还可以一次读取多个sheet，只需要在写法1中将doRead()换成doReadAll()方法，并去除.sheet()方法即可读取所有sheet，而在写法2中，我们注意到readSheet也可以传入参数，我们只需要多次readSheet，并且将返回的ReadSheet对象一次性传入read方法中，就可以完成读取指定sheet的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span>
        <span class="token comment">// 写法1：</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">TestFileUtil</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;demo&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;demo.xlsx&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span>
        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token class-name">DemoData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写法2：</span>
        fileName <span class="token operator">=</span> <span class="token class-name">TestFileUtil</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;demo&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;demo.xlsx&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">ExcelReader</span> excelReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            excelReader <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token class-name">DemoData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ReadSheet</span> readSheet <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">readSheet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            excelReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>excelReader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span>
                excelReader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-写excel" tabindex="-1"><a class="header-anchor" href="#_2-写excel" aria-hidden="true">#</a> 2. 写Excel</h2><p>项目中用到更多的是写Excel的功能，主要用于导出数据表，假设我们需要的excel表格如下： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-22/5f17ecb060f98.png" alt="img" loading="lazy"> 然后我们对应的数据对象是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;字符串标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;日期标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;数字标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 忽略这个字段
     */</span>
    <span class="token annotation punctuation">@ExcelIgnore</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ignore<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里尤其需要注意注解的使用，<code>@ExcelProperty</code>用来指定导出后的列名，而<code>@ExcelIgnore</code>用来指定导出时忽略该字段，在实际使用时我们往往有很多字段是不需要导出的，一个个配置显然不太方便，因此我们需要用到<code>@ExcelIgnoreUnannotated</code>这一注解，这个注解可以放在类前，用来指定该类不加ExcelProperty注解的字段都不会参与读写（默认是都会参与的）。接下来使用项目代码进行分析，Controller层是直接调用导出功能的地方：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CommonJsonResult</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">HlfRunDailyEntity</span> hlfRunDaily<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HlfRunDailyEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> hlfRunDailyService<span class="token punctuation">.</span><span class="token function">selectHlfRunDailyList</span><span class="token punctuation">(</span>hlfRunDaily<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;换流阀运行日报&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> <span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">dateTimeNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.xls&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ExcelUtil</span><span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HlfRunDailyEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">&quot;模板&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">CommonJsonResult</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里fileName指定了表格文件的文件名，sheet方法中的参数是sheet的名称，只要我们配置好了数据对象的字段，就可以导出我们想要的Excel表格，实际上这是最简单的功能，接下来根据官方文档记录一下更多的高级导出需求。</p><h3 id="_2-1-导出指定列" tabindex="-1"><a class="header-anchor" href="#_2-1-导出指定列" aria-hidden="true">#</a> 2.1 导出指定列</h3><p>我们可以只导出指定的列（通过注解实现会不太灵活）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excludeOrIncludeWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">TestFileUtil</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;excludeOrIncludeWrite&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.xlsx&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据用户传入字段 假设我们要忽略 date</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> excludeColumnFiledNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    excludeColumnFiledNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span>
    <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token class-name">DemoData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludeColumnFiledNames</span><span class="token punctuation">(</span>excludeColumnFiledNames<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">&quot;模板&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fileName <span class="token operator">=</span> <span class="token class-name">TestFileUtil</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;excludeOrIncludeWrite&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.xlsx&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据用户传入字段 假设我们只要导出 date</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> includeColumnFiledNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    includeColumnFiledNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span>
    <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token class-name">DemoData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeColumnFiledNames</span><span class="token punctuation">(</span>includeColumnFiledNames<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">&quot;模板&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子给出了只导出指定列或者只忽略指定列的方法，在实际业务中可以灵活使用。</p><h3 id="_2-2-指定写入列" tabindex="-1"><a class="header-anchor" href="#_2-2-指定写入列" aria-hidden="true">#</a> 2.2 指定写入列</h3><p>然后我们还可以指定写入excel时每个字段指定的列，不仅仅是列名，还有列的位置，我们只需要在ExcelProperty注解中加上index属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexData</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;字符串标题&quot;</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;日期标题&quot;</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 这里设置3 会导致第二列空的
     */</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;数字标题&quot;</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-复杂头写入" tabindex="-1"><a class="header-anchor" href="#_2-3-复杂头写入" aria-hidden="true">#</a> 2.3 复杂头写入</h3><p>我们还可以进行复杂的头写入，比如我们可以在三个列上合并一个主标题，同样使用ExcelProperty实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComplexHeadData</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;主标题&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;字符串标题&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;主标题&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;日期标题&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;主标题&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;数字标题&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出的效果是这个样的： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-22/5f17f0b1de375.png" alt="img" loading="lazy"></p><h3 id="_2-4-设置列宽行高及其他样式" tabindex="-1"><a class="header-anchor" href="#_2-4-设置列宽行高及其他样式" aria-hidden="true">#</a> 2.4 设置列宽行高及其他样式</h3><p>我们在数据对象中还可以使用<code>@ColumnWidth</code>和<code>@HeadRowHeight</code>这样的注解来定义整个表或者指定列的行高和列宽，这个注解可以加在类上，用来指定整个表，也可以加在字段上，用来指定某一列，注意加在字段上的属性优先级是高于整个表的，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ContentRowHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@HeadRowHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WidthAndHeightData</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;字符串标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;日期标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 宽度为50
     */</span>
    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;数字标题&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> doubleData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下： <img src="http://123.56.93.7:8080/Public/Uploads/2020-07-22/5f17f1e779a2d.png" alt="img" loading="lazy"> 类似的指定样式的注解还有很多，可以指定单元格的颜色、字体等，都通过对应的注解进行实现，这里不做更多的赘述，可以参考文章末尾给出的官方文档链接。</p><h2 id="备注" tabindex="-1"><a class="header-anchor" href="#备注" aria-hidden="true">#</a> 备注</h2>`,39),ws={href:"https://www.yuque.com/easyexcel/doc/easyexcel",target:"_blank",rel:"noopener noreferrer"},qs=e(`<h2 id="springboot集成阿里云oss对象存储功能" tabindex="-1"><a class="header-anchor" href="#springboot集成阿里云oss对象存储功能" aria-hidden="true">#</a> Springboot集成阿里云OSS对象存储功能</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong> https://blog.csdn.net/qq_38522268/article/details/85784149 <strong>3.操作步骤</strong></p><h2 id="spring-boot集成阿里mq" tabindex="-1"><a class="header-anchor" href="#spring-boot集成阿里mq" aria-hidden="true">#</a> spring boot集成阿里MQ</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong></p><p><strong>3.操作步骤</strong></p><h2 id="系统授权认证" tabindex="-1"><a class="header-anchor" href="#系统授权认证" aria-hidden="true">#</a> 系统授权认证</h2><p><strong>1.简介</strong> 通过配置文件配置好 工具生成的公钥和到期时间相关的密文 <strong>2.参考资料</strong> https://hutool.cn/docs/#/crypto/非对称加密-AsymmetricCrypto <strong>3.操作步骤</strong> 1.在commonjar项目中执行代码，获取公钥</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">RSA</span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获得私钥</span>
rsa<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
rsa<span class="token punctuation">.</span><span class="token function">getPrivateKeyBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//获得公钥</span>
rsa<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
rsa<span class="token punctuation">.</span><span class="token function">getPublicKeyBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.执行代码 获取加密后的密文</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">RSA</span> rsa1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSA</span><span class="token punctuation">(</span>privateStr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> a<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypt22 <span class="token operator">=</span> rsa1<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token string">&quot;2022-11-30&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">CHARSET_UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyType<span class="token punctuation">.</span>PrivateKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aByte <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">decodeHex</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token class-name">HexUtil</span><span class="token punctuation">.</span><span class="token function">encodeHexStr</span><span class="token punctuation">(</span>encrypt22<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.将密文填入配置文件application.yml中</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">rsaPublicKey</span><span class="token punctuation">:</span> MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCEVjjI8gYpAZ2/JajAueYzDTuAhsCmWIEm0vqWtiBch4/EZbrZeMPkL5c80IeMR2gFeE81glb9Nni3Hk8gnXCzf8eFkACuAbIiAWApPhA2n4jb26bjGQq+6FtO3JT0u2Bd1vFIBqrpV/IYvlfGS2T2XYk1XYQi8E1OSOQ8QVWOpQIDAQAB
  <span class="token key atrule">rsaCipher</span><span class="token punctuation">:</span> 72954a3bfb5b734a55f49c5f66fc6b3d4bbd886bbe744a40ba499227652bc878933d6ed2ccb7f0fd1890db393e7a867101f116ab6949dfc4b02d4741ca7450529d2de681632f69216e502ad895df396e3a7326853309829f36e52ddb4b2ecf7766d823585c65d0bdc6387c0beee99021b9aa1fc75542c0e0935bc11855b61fdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="幂等性注解" tabindex="-1"><a class="header-anchor" href="#幂等性注解" aria-hidden="true">#</a> 幂等性注解</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong> https://www.jianshu.com/p/7800ba5171f0 <strong>3.操作步骤</strong></p><h1 id="大数据相关" tabindex="-1"><a class="header-anchor" href="#大数据相关" aria-hidden="true">#</a> 大数据相关</h1><h2 id="es的搭建" tabindex="-1"><a class="header-anchor" href="#es的搭建" aria-hidden="true">#</a> ES的搭建</h2><p>欢迎使用ShowDoc！ 1.安装es 拉取镜像</p><p>docker pull elasticsearch:7.4.1</p><p>创建用户自定义网络</p><p>docker network create hahanetwork</p><p>运行ES docker run —name elasticsearch —net hahanetwork -p 9200:9200 -p 9300:9300 -e “discovery.type=single-node” -d elasticsearch:7.4.1</p><p>查看 http://localhost:9200/</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-07-31/5f23825db8330.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,26),Ss={href:"http://10.0.0.11:9200/",target:"_blank",rel:"noopener noreferrer"},Ps=e(`<h2 id="spring-boot集成es" tabindex="-1"><a class="header-anchor" href="#spring-boot集成es" aria-hidden="true">#</a> spring boot集成ES</h2><p>欢迎使用ShowDoc！</p><h3 id="_1-手动添加pom" tabindex="-1"><a class="header-anchor" href="#_1-手动添加pom" aria-hidden="true">#</a> 1.手动添加pom</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-编写配置" tabindex="-1"><a class="header-anchor" href="#_2-编写配置" aria-hidden="true">#</a> 2.编写配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>application.yml
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>
      <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> myes
      <span class="token comment">#      cluster-nodes: 127.0.0.1:9300</span>
      <span class="token key atrule">cluster-nodes</span><span class="token punctuation">:</span> hadoop137<span class="token punctuation">:</span><span class="token number">9300</span><span class="token punctuation">,</span>hadoop138<span class="token punctuation">:</span><span class="token number">9300</span><span class="token punctuation">,</span>hadoop139<span class="token punctuation">:</span><span class="token number">9300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://blog.csdn.net/pyfysf/article/details/100810846</p><h3 id="集成遇到问题" tabindex="-1"><a class="header-anchor" href="#集成遇到问题" aria-hidden="true">#</a> 集成遇到问题：</h3>`,8),Cs={href:"https://github.com/SpringBootApplication",target:"_blank",rel:"noopener noreferrer"},As=e(`<h2 id="java递归获取某个父节点下面的所有子节点" tabindex="-1"><a class="header-anchor" href="#java递归获取某个父节点下面的所有子节点" aria-hidden="true">#</a> java递归获取某个父节点下面的所有子节点</h2><h1 id="java递归获取某个父节点下面的所有子节点-1" tabindex="-1"><a class="header-anchor" href="#java递归获取某个父节点下面的所有子节点-1" aria-hidden="true">#</a> java递归获取某个父节点下面的所有子节点</h1><h2 id="_1-源码分析" tabindex="-1"><a class="header-anchor" href="#_1-源码分析" aria-hidden="true">#</a> 1. 源码分析</h2><p>关于原理方面，我们使用一个字典类的递归获取作为例子，这个字典类有三个字段，分别为id,pid和name，分别代表目录本身的id父id和目录名，并有对应的setter和getter。之后我们主要看到算法部分：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuRecursion</span> <span class="token punctuation">{</span>
    <span class="token comment">//子节点</span>
    <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> childMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 获取某个父节点下面的所有子节点
     * <span class="token keyword">@param</span> <span class="token parameter">menuList</span>
     * <span class="token keyword">@param</span> <span class="token parameter">pid</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> <span class="token function">treeMenuList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> menuList<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Menu</span> mu <span class="token operator">:</span> menuList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//遍历出父id等于参数的id，add进子节点集合</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>mu<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//递归遍历下一级</span>
                <span class="token function">treeMenuList</span><span class="token punctuation">(</span>menuList<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>mu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                childMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> childMenu<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码有些长，我们先省略了测试部分，直接看方法是如何实现递归获取的，treeMenuList的方法的作用是获取某个父节点下面的所有子节点，我们都知道，作为递归方法，我们需要关注的只有两个问题：一个是重复动作应该是什么，第二个是终止条件是什么。这里的重复动作自不必说，肯定是获取一个父节点下的所有子节点，而对于终止条件，稍加分析可以看出是“当前节点不再是任何节点的父节点”，也就是无法再找到任何一个节点的pid等于当前节点的id，或者简单点说就是深度遍历到底了。通过分析递归的两个核心因素我们可以验证这个算法是正确的，之后我们来看测试用例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> menuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu1<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu2<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu3<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录1.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu3<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu4<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu4<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu4<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu5<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu5<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录2.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu5<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu6<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu6<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录2.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu6<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Menu</span> mu7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu7<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu7<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;目录2.2.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mu7<span class="token punctuation">.</span><span class="token function">setPid</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        menuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mu7<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">&gt;</span></span> childList <span class="token operator">=</span> <span class="token function">treeMenuList</span><span class="token punctuation">(</span>menuList<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Menu</span> m <span class="token operator">:</span> childList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;   &quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码大部分篇幅都是在构造字典树，我们不妨画个图来表示一下，免去阅读这一大段代码了： <img src="http://123.56.93.7:8080/Public/Uploads/2020-08-03/5f27716db19bb.png" alt="img" loading="lazy"> 这是一个典型的树形结构，每个节点显示了它们的name和id，它们的pid通过连线表示，那么我们通过递归开始遍历，可以看到输入的参数一开始是我们的目录集合和“1”，也就是从主目录开始遍历，那么它的运行顺序具体是怎样的呢？这里进行一个分析： 参数为1，找到子节点2 参数为2，找到子节点3 参数为3，找不到子节点，返回上层递归，向结果集加入3 参数为2，找到子节点4 参数为4，找不到子节点，返回上层递归，向结果集加入4 参数为2，找不到子节点，返回上层递归，向结果集加入2 参数为1，找到子节点5, 参数为5，找到子节点6 参数为6，找不到子节点，返回上层递归，向结果集加入6 参数为5，找到子节点7 参数为7，找到子节点8 参数为8，找不到子节点，返回上层递归，向结果集加入8 参数为7，找不到子节点，返回上层递归，向结果集加入7 参数为5，找不到子节点，返回上层递归，向结果集加入5 参数为1，找不到子节点，返回上层递归，向结果集加入1 递归结束，最后返回结果集为（3 4 2 6 8 7 5 1）</p><p>这里我们可能注意到这个结果集和这个二叉树的后序遍历结果是一样的，但是这只是因为这个目录树正好是二叉树，更准确地说，这个算法的内核其实就是N叉树的后序遍历，我们不妨分析一下该算法的思想：对于每一个节点，在这里也就是目录，必须先遍历完该节点的子节点才能访问父节点，这正是N叉树的后序遍历的思想。</p><p>这里再看看具体的输出：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>3   目录1.1
4   目录1.2
2   目录1
6   目录2.1
8   目录2.2.1
7   目录2.2
5   目录2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-项目中的应用" tabindex="-1"><a class="header-anchor" href="#_2-项目中的应用" aria-hidden="true">#</a> 2. 项目中的应用</h2><p>这里给出了一个可能的实际应用场景：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 递归获取某个父机构节点下面的所有子机构节点
     * <span class="token keyword">@param</span> <span class="token parameter">childOrg</span> 要返回的结果
     * <span class="token keyword">@param</span> <span class="token parameter">orgList</span>  数据库查询出来的所有机构集合
     * <span class="token keyword">@param</span> <span class="token parameter">pid</span>      父id
     * 注:本身的机构节点不会添加进去
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">orgRecursion</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationVo</span><span class="token punctuation">&gt;</span></span> childOrg<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationVo</span><span class="token punctuation">&gt;</span></span> orgList<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationVo</span> org <span class="token operator">:</span> orgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//遍历出父id等于参数的id，add进子节点集合</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//递归遍历下一级</span>
                    <span class="token function">orgRecursion</span><span class="token punctuation">(</span>childOrg<span class="token punctuation">,</span>orgList<span class="token punctuation">,</span> org<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//末级机构才添加进去(依自己业务定义)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span><span class="token function">getOrgLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        childOrg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>org<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个算法的主要功能是从数据库中提取的数据还原成树形结构，在特定的业务中会有很多应有。</p><h2 id="_3-拓展链接" tabindex="-1"><a class="header-anchor" href="#_3-拓展链接" aria-hidden="true">#</a> 3. 拓展链接</h2>`,16),Ds={href:"https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},js=e(`<h2 id="docker-compose安装elasticsearch" tabindex="-1"><a class="header-anchor" href="#docker-compose安装elasticsearch" aria-hidden="true">#</a> Docker compose安装Elasticsearch</h2><h3 id="_1-编写docker-compose文件" tabindex="-1"><a class="header-anchor" href="#_1-编写docker-compose文件" aria-hidden="true">#</a> 1.编写docker-compose文件</h3><p>https://www.jianshu.com/p/6c80472a7db3</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span>  elasticsearch<span class="token punctuation">:</span>6.4.3
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /data/projects/elasticsearch/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data<span class="token punctuation">:</span>rw
      <span class="token punctuation">-</span> /data/projects/elasticsearch/conf/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
      <span class="token punctuation">-</span> /data/projects/elasticsearch/conf/jvm.options<span class="token punctuation">:</span>/usr/share/elasticsearch/config/jvm.options
      <span class="token punctuation">-</span> /data/projects/elasticsearch/logs<span class="token punctuation">:</span>/user/share/elasticsearch/logs<span class="token punctuation">:</span>rw
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;9200:9200&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;9300:9300&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> discovery.type=single<span class="token punctuation">-</span>node
  <span class="token key atrule">es-head</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> tobias74/elasticsearch<span class="token punctuation">-</span>head<span class="token punctuation">:</span><span class="token number">6</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es<span class="token punctuation">-</span>head
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9100:9100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-编写elasticsearch-yml文件" tabindex="-1"><a class="header-anchor" href="#_2-编写elasticsearch-yml文件" aria-hidden="true">#</a> 2 编写elasticsearch.yml文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">&quot;es-server&quot;</span>
<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span>
<span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0
<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
<span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /usr/share/elasticsearch/logs
<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
<span class="token key atrule">xpack.security.audit.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-编写jvm配置文件" tabindex="-1"><a class="header-anchor" href="#_3-编写jvm配置文件" aria-hidden="true">#</a> 3.编写jvm配置文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span>Djna.nosys=true
<span class="token comment"># turn off a JDK optimization that throws away stack traces for common</span>
<span class="token comment"># exceptions because stack traces are important for debugging</span>
<span class="token punctuation">-</span>XX<span class="token punctuation">:</span><span class="token punctuation">-</span>OmitStackTraceInFastThrow
<span class="token comment"># flags to configure Netty</span>
<span class="token punctuation">-</span>Dio.netty.noUnsafe=true
<span class="token punctuation">-</span>Dio.netty.noKeySetOptimization=true
<span class="token punctuation">-</span>Dio.netty.recycler.maxCapacityPerThread=0
<span class="token comment"># log4j 2</span>
<span class="token punctuation">-</span>Dlog4j.shutdownHookEnabled=false
<span class="token punctuation">-</span>Dlog4j2.disable.jmx=true
<span class="token punctuation">-</span>Djava.io.tmpdir=$<span class="token punctuation">{</span>ES_TMPDIR<span class="token punctuation">}</span>
<span class="token comment">## heap dumps</span>
<span class="token comment"># generate a heap dump when an allocation from the Java heap fails</span>
<span class="token comment"># heap dumps are created in the working directory of the JVM</span>
<span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+HeapDumpOnOutOfMemoryError
<span class="token comment"># specify an alternative path for heap dumps; ensure the directory exists and</span>
<span class="token comment"># has sufficient space</span>
<span class="token punctuation">-</span>XX<span class="token punctuation">:</span>HeapDumpPath=data
<span class="token comment"># specify an alternative path for JVM fatal error logs</span>
<span class="token punctuation">-</span>XX<span class="token punctuation">:</span>ErrorFile=logs/hs_err_pid%p.log
<span class="token comment">## JDK 8 GC logging</span>
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+PrintGCDetails
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+PrintGCDateStamps
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+PrintTenuringDistribution
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+PrintGCApplicationStoppedTime
8<span class="token punctuation">:</span><span class="token punctuation">-</span>Xloggc<span class="token punctuation">:</span>logs/gc.log
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+UseGCLogFileRotation
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>NumberOfGCLogFiles=32
8<span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>GCLogFileSize=64m
<span class="token comment"># JDK 9+ GC logging</span>
9<span class="token punctuation">-</span><span class="token punctuation">:</span><span class="token punctuation">-</span>Xlog<span class="token punctuation">:</span>gc*<span class="token punctuation">,</span>gc+age=trace<span class="token punctuation">,</span>safepoint<span class="token punctuation">:</span>file=logs/gc.log<span class="token punctuation">:</span>utctime<span class="token punctuation">,</span>pid<span class="token punctuation">,</span>tags<span class="token punctuation">:</span>filecount=32<span class="token punctuation">,</span>filesize=64m
<span class="token comment"># due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise</span>
<span class="token comment"># time/date parsing will break in an incompatible way for some date patterns and locals</span>
9<span class="token punctuation">-</span><span class="token punctuation">:</span><span class="token punctuation">-</span>Djava.locale.providers=COMPAT
<span class="token comment"># temporary workaround for C2 bug with JDK 10 on hardware with AVX-512</span>
10<span class="token punctuation">-</span><span class="token punctuation">:</span><span class="token punctuation">-</span>XX<span class="token punctuation">:</span>UseAVX=2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-启动" tabindex="-1"><a class="header-anchor" href="#_4-启动" aria-hidden="true">#</a> 4 启动</h3><div class="language-shll line-numbers-mode" data-ext="shll"><pre class="language-shll"><code>docker-compose up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="es数据性能测试" tabindex="-1"><a class="header-anchor" href="#es数据性能测试" aria-hidden="true">#</a> ES数据性能测试</h2><p>https://www.cnblogs.com/sesexxoo/p/6190583.html</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-08-24/5f4317b537e6e.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-08-24/5f431793e45ae.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="elk的搭建和使用" tabindex="-1"><a class="header-anchor" href="#elk的搭建和使用" aria-hidden="true">#</a> ELK的搭建和使用</h2><p>欢迎使用ShowDoc！</p><h2 id="python应用日志写入es" tabindex="-1"><a class="header-anchor" href="#python应用日志写入es" aria-hidden="true">#</a> python应用日志写入ES</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong> python应用日志写入ES https://blog.csdn.net/u012599545/article/details/103020349 <strong>3.操作步骤</strong>欢迎使用ShowDoc！</p><h2 id="docker-compose安装rocketmq" tabindex="-1"><a class="header-anchor" href="#docker-compose安装rocketmq" aria-hidden="true">#</a> Docker-compose安装RocketMq</h2><p><strong>1.简介</strong> 基于MQ进行任务异步管理 <strong>2.参考资料</strong> https://www.cnblogs.com/yuhuiqing/p/12341517.html <strong>3.操作步骤</strong> Docker安装RocketMQ Server + Broker + Console</p><h2 id="_1、创建docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#_1、创建docker-compose-yml" aria-hidden="true">#</a> 1、创建docker-compose.yml</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.5&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">rmqnamesrv</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> foxiswho/rocketmq<span class="token punctuation">:</span>server
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./data/logs<span class="token punctuation">:</span>/opt/logs
      <span class="token punctuation">-</span> ./data/store<span class="token punctuation">:</span>/opt/store
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
        <span class="token key atrule">rmq</span><span class="token punctuation">:</span>
          <span class="token key atrule">aliases</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> rmqnamesrv
  <span class="token key atrule">rmqbroker</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> foxiswho/rocketmq<span class="token punctuation">:</span>broker
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>
      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./data/logs<span class="token punctuation">:</span>/opt/logs
      <span class="token punctuation">-</span> ./data/store<span class="token punctuation">:</span>/opt/store
      <span class="token punctuation">-</span> ./data/brokerconf/broker.conf<span class="token punctuation">:</span>/etc/rocketmq/broker.conf
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
        <span class="token key atrule">NAMESRV_ADDR</span><span class="token punctuation">:</span> <span class="token string">&quot;rmqnamesrv:9876&quot;</span>
        <span class="token key atrule">JAVA_OPTS</span><span class="token punctuation">:</span> <span class="token string">&quot; -Duser.home=/opt&quot;</span>
        <span class="token key atrule">JAVA_OPT_EXT</span><span class="token punctuation">:</span> <span class="token string">&quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> mqbroker <span class="token punctuation">-</span>c /etc/rocketmq/broker.conf
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> rmqnamesrv
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">rmq</span><span class="token punctuation">:</span>
        <span class="token key atrule">aliases</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> rmqbroker
  <span class="token key atrule">rmqconsole</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> styletang/rocketmq<span class="token punctuation">-</span>console<span class="token punctuation">-</span>ng
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqconsole
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
        <span class="token key atrule">JAVA_OPTS</span><span class="token punctuation">:</span> <span class="token string">&quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> rmqnamesrv
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">rmq</span><span class="token punctuation">:</span>
        <span class="token key atrule">aliases</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> rmqconsole
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">rmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> rmq
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、创建broker-conf" tabindex="-1"><a class="header-anchor" href="#_2、创建broker-conf" aria-hidden="true">#</a> 2、创建broker.conf</h2><p>broker.conf放在./data/brokerconf/ 下data与docker-compose.yml同级目录</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
<span class="token comment"># contributor license agreements.  See the NOTICE file distributed with</span>
<span class="token comment"># this work for additional information regarding copyright ownership.</span>
<span class="token comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
<span class="token comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
<span class="token comment"># the License.  You may obtain a copy of the License at</span>
<span class="token comment">#</span>
<span class="token comment">#     http://www.apache.org/licenses/LICENSE-2.0</span>
<span class="token comment">#</span>
<span class="token comment">#  Unless required by applicable law or agreed to in writing, software</span>
<span class="token comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<span class="token comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<span class="token comment">#  See the License for the specific language governing permissions and</span>
<span class="token comment">#  limitations under the License.</span>
<span class="token comment"># 所属集群名字</span>
brokerClusterName=DefaultCluster
<span class="token comment"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span>
<span class="token comment"># 在 broker-b.properties 使用: broker-b</span>
brokerName=broker<span class="token punctuation">-</span>a
<span class="token comment"># 0 表示 Master，&gt; 0 表示 Slave</span>
brokerId=0
<span class="token comment"># nameServer地址，分号分割</span>
<span class="token comment"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span>
<span class="token comment"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to \`&lt;192.168.0.120:10909&gt;\` failed</span>
<span class="token comment"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span>
<span class="token comment"># brokerIP1=192.168.0.253</span>
<span class="token comment"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span>
defaultTopicQueueNums=4
<span class="token comment"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span>
autoCreateTopicEnable=true
<span class="token comment"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span>
autoCreateSubscriptionGroup=true
<span class="token comment"># Broker 对外服务的监听端口</span>
listenPort=10911
<span class="token comment"># 删除文件时间点，默认凌晨4点</span>
deleteWhen=04
<span class="token comment"># 文件保留时间，默认48小时</span>
fileReservedTime=120
<span class="token comment"># commitLog 每个文件的大小默认1G</span>
mapedFileSizeCommitLog=1073741824
<span class="token comment"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span>
mapedFileSizeConsumeQueue=300000
<span class="token comment"># destroyMapedFileIntervalForcibly=120000</span>
<span class="token comment"># redeleteHangedFileInterval=120000</span>
<span class="token comment"># 检测物理文件磁盘空间</span>
diskMaxUsedSpaceRatio=88
<span class="token comment"># 存储路径</span>
<span class="token comment"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span>
<span class="token comment"># commitLog 存储路径</span>
<span class="token comment"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span>
<span class="token comment"># 消费队列存储</span>
<span class="token comment"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span>
<span class="token comment"># 消息索引存储路径</span>
<span class="token comment"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span>
<span class="token comment"># checkpoint 文件存储路径</span>
<span class="token comment"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span>
<span class="token comment"># abort 文件存储路径</span>
<span class="token comment"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span>
<span class="token comment"># 限制的消息大小</span>
maxMessageSize=65536
<span class="token comment"># flushCommitLogLeastPages=4</span>
<span class="token comment"># flushConsumeQueueLeastPages=2</span>
<span class="token comment"># flushCommitLogThoroughInterval=10000</span>
<span class="token comment"># flushConsumeQueueThoroughInterval=60000</span>
<span class="token comment"># Broker 的角色</span>
<span class="token comment"># - ASYNC_MASTER 异步复制Master</span>
<span class="token comment"># - SYNC_MASTER 同步双写Master</span>
<span class="token comment"># - SLAVE</span>
brokerRole=ASYNC_MASTER
<span class="token comment"># 刷盘方式</span>
<span class="token comment"># - ASYNC_FLUSH 异步刷盘</span>
<span class="token comment"># - SYNC_FLUSH 同步刷盘</span>
flushDiskType=ASYNC_FLUSH
<span class="token comment"># 发消息线程池数量</span>
<span class="token comment"># sendMessageThreadPoolNums=128</span>
<span class="token comment"># 拉消息线程池数量</span>
<span class="token comment"># pullMessageThreadPoolNums=128</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、启动docker-compose-up-d" tabindex="-1"><a class="header-anchor" href="#_3、启动docker-compose-up-d" aria-hidden="true">#</a> 3、启动docker-compose up -d</h2><h2 id="_4-功能验证" tabindex="-1"><a class="header-anchor" href="#_4-功能验证" aria-hidden="true">#</a> 4.功能验证</h2><p>进入控制台则启动成功 <img src="http://123.56.93.7:8080/Public/Uploads/2020-09-22/5f69b0a453d8d.png" alt="img" loading="lazy"></p><h2 id="相关包打包" tabindex="-1"><a class="header-anchor" href="#相关包打包" aria-hidden="true">#</a> 相关包打包</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong> https://blog.csdn.net/xb12369/article/details/79966633 <strong>3.操作步骤</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- Maven Assembly Plugin --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>\${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- get all project dependencies --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- MainClass in mainfest make a executable jar --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>util.Microseer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
                        <span class="token comment">&lt;!-- bind to the packaging phase --&gt;</span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="技术规范" tabindex="-1"><a class="header-anchor" href="#技术规范" aria-hidden="true">#</a> 技术规范</h1><h2 id="版本控制规范" tabindex="-1"><a class="header-anchor" href="#版本控制规范" aria-hidden="true">#</a> 版本控制规范</h2><p>1</p><h3 id="版本号希望遵循大中小版本号编制" tabindex="-1"><a class="header-anchor" href="#版本号希望遵循大中小版本号编制" aria-hidden="true">#</a> 版本号希望遵循大中小版本号编制：</h3>`,37),zs={href:"http://123.56.93.7:8080/Public/Uploads/2020-06-08/5edd9081e2322.rar",target:"_blank",rel:"noopener noreferrer"},Ts=n("h2",{id:"代码规范",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码规范","aria-hidden":"true"},"#"),a(" 代码规范")],-1),Es=n("p",null,"1",-1),Us={href:"http://123.56.93.7:8080/Public/Uploads/2020-06-04/5ed8b1cecc63d.pdf",target:"_blank",rel:"noopener noreferrer"},Is=e(`<h1 id="项目部署" tabindex="-1"><a class="header-anchor" href="#项目部署" aria-hidden="true">#</a> 项目部署</h1><h2 id="windows环境下-部署后台" tabindex="-1"><a class="header-anchor" href="#windows环境下-部署后台" aria-hidden="true">#</a> windows环境下 部署后台</h2><p>欢迎使用ShowDoc！</p><p>Springboot学习之–将springboot注册为windows系统服务 Springboot学习之–将springboot注册为windows系统服务 一、编写bat文件启动jar 二、windows启动菜单添加快捷方式启动 三、使用winsw将springboot打包的jar注册系统本地服务 最近做了一个项目，部署到客户的服务器上，运行状况也良好。就是客户的服务器经常会重启。然后客户也不是it人员，重启后重新启动服务，就得使用命令： jar -jar xxxx.jar 这对于不懂技术的人来说是个很复杂的事，于是决定打算修改修改，就有了下文。</p><p>一、编写bat文件启动jar 1、新建一个名为fmstart.bat，打开编辑，写入以下内容</p><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>cd E:/springboot
java -jar fmstart-0.0.1-dev.jar
exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、然后保存。ok，下次启动时，可以直接点击fmstart.bat启动了。至此愉快的玩耍了几天。</p><p>你以为这样就完了，过了几天，客户觉得点击bat启动也太麻烦了，我想一开机就启动。于是又得改。</p><p>二、windows启动菜单添加快捷方式启动 1、win+R打开运行窗口，输入shell:startup； 2、将fmstart.bat，新建一个快捷方式，然后将快捷方式拷贝到启动项文件中。</p><p>重启电脑，看到了熟悉的界面，启动成功。</p><p>又过了几天，客户看到我们的cmd界面也不爽了，说能否不让它出现，我容易误把它关掉。 于是又得改改改。。。。。</p><p>三、使用winsw将springboot打包的jar注册系统本地服务 【注】：本人只在Windows Server和win7测试，可以成功；win10会报错。等待作者更新新版本。</p><p>1、先从github上下载winsw，下载地址https://github.com/kohsuke/winsw 我下载的是2.1.2版本，小伙伴们可下载最新的版本。</p><p>2、下载WinSW.NET4.exe，这个是支持.netframework4.0的版本，如果没有.net4.0，请先安装.net4.0，下载后改名成你想启动的服务名字。比如：fmstart.exe</p><p>3、新建一个fmstart.xml文件，编写配置内容</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">&gt;</span></span> 
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>fmstart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span> 
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fmstart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>This is fmstart service.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!-- java环境变量 --&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JAVA_HOME<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>%JAVA_HOME%<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">&gt;</span></span>-jar &quot;E:\\springboot\\fmstart-0.0.1-dev.jar&quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!-- 开机启动 --&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startmode</span><span class="token punctuation">&gt;</span></span>Automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>startmode</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!-- 日志配置 --&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logpath</span><span class="token punctuation">&gt;</span></span>%BASE%\\log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logpath</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logmode</span><span class="token punctuation">&gt;</span></span>rotate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logmode</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、保存fmstart.xml文件，将fmstart.xml和fmstart.exe放到要启动的jar的同级目录下。 例如：E:\\springboot\\</p><p>5、打开cmd，进入到E:\\springboot;输入fmstart.exe install安装服务。 安装后，输入fmstart.exe start启动服务；</p><p>相关命令如下： 除了install命令外，还有其它命令： uninstall：删除服务 start：启动服务 stop：停止服务 restart：重启服务 status：输出当前服务的状态</p><p>6、安装成功后，win+R打开运行，输入services.msc,查看是否有一个叫fmstart的服务。运行状态是否为正在运行。</p><p>如果安装成功后，服务状态为正在运行，即可测试你的接口来了。 到此结束了，客户每次启动服务器就会自己运行该服务，也不会有cmd小窗了。</p><h2 id="vue前端部署" tabindex="-1"><a class="header-anchor" href="#vue前端部署" aria-hidden="true">#</a> vue前端部署</h2><p>欢迎使用ShowDoc！ 一、vue项目打包</p><p>正常vue_cli脚手架打包命令： npm run build</p><p>vue-element-admin 项目 打包命令： npm run build:prod</p><p>[ 两句命令区别大概是后台框架需要指定打包的环境（test,dev,prod），具体的区别还不太清楚，</p><p>参考文章：https://blog.csdn.net/crazyzomble/article/details/95614466 ]</p><p>可能需要修改的配置参数：</p><ol><li><p>env.production 文件中 VUE_APP_BASSE_API=’接口地址’</p></li><li><p>vue.config.js 文件中</p><p>publicPath: ‘/‘,</p><p>outputDir: ‘dist’,</p><p>assetsDir: ‘static’</p></li></ol><p>二、nginx 部署</p><ol><li>把打包完成的vue项目dist 文件放到nginx安装路径下的html文件夹中</li><li>修改nginx.conf 配置文件</li></ol><p>server { listen 80; // 端口 server_name localhost; // 本地IP</p><h1 id="charset-koi8-r" tabindex="-1"><a class="header-anchor" href="#charset-koi8-r" aria-hidden="true">#</a> charset koi8-r;</h1><h1 id="access-log-logs-host-access-log-main" tabindex="-1"><a class="header-anchor" href="#access-log-logs-host-access-log-main" aria-hidden="true">#</a> access_log logs/host.access.log main;</h1><p>location / { root D:/software/nginx-1.17.10/html/dist; // 打包项目地址 try_files $uri $uri/ /index.html last; // 指向index.html index index.html; } }</p><ol><li>nginx 相关命令行</li></ol><p>启动：start nginx</p><p>停止：nginx.exe -s stop（不保存相关信息）</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>       nginx.exe -s quit（保存相关信息）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启：nginx.exe -s reload（保存相关信息）</p><p>无论是nginx -s stop还是nginx -s reload命令，都会出现这个错误。</p><p>解决方法：使用命令创建/logs/nginx.pid文件，命令如下所示：</p><p>nginx -c conf/nginx.conf 启动nginx 有很多种方法启动nginx</p><p>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过</p><p>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 nginx.exe 或者 start nginx ，回车即可</p>`,45),Ms={href:"http://localhost:80%EF%BC%8C%E5%9B%9E%E8%BD%A6/",target:"_blank",rel:"noopener noreferrer"},Bs=e('<p>(2)可以在cmd命令窗口输入命令 tasklist /fi “imagename eq nginx.exe”</p><p>关闭nginx 如果使用cmd命令窗口启动nginx，关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令： nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)</p><p>(2)使用taskkill： taskkill /f /t /im nginx.exe</p><h1 id="安装服务" tabindex="-1"><a class="header-anchor" href="#安装服务" aria-hidden="true">#</a> 安装服务</h1><p>CMD:&gt; winsw.exe install</p><h1 id="卸载服务" tabindex="-1"><a class="header-anchor" href="#卸载服务" aria-hidden="true">#</a> 卸载服务</h1><p>CMD:&gt; winsw.exe uninstall</p><h1 id="启动服务" tabindex="-1"><a class="header-anchor" href="#启动服务" aria-hidden="true">#</a> 启动服务</h1><p>CMD:&gt; winsw.exe start</p><h1 id="停止服务" tabindex="-1"><a class="header-anchor" href="#停止服务" aria-hidden="true">#</a> 停止服务</h1><p>CMD:&gt; winsw.exe stop</p><h2 id="redis部署-windows版本" tabindex="-1"><a class="header-anchor" href="#redis部署-windows版本" aria-hidden="true">#</a> redis部署（windows版本）</h2>',13),Ls={href:"http://123.56.93.7:8080/web/#%E4%B8%80%E3%80%81%E4%B8%8B%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"},Rs={href:"http://123.56.93.7:8080/web/#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},Os={href:"http://123.56.93.7:8080/web/#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},Ns=n("li",null,"四、重启",-1),Hs=e(`<h3 id="一、下载" tabindex="-1"><a class="header-anchor" href="#一、下载" aria-hidden="true">#</a> 一、下载</h3><p>https://github.com/tporadowski/redis/releases/tag/v5.0.9</p><h3 id="二、安装" tabindex="-1"><a class="header-anchor" href="#二、安装" aria-hidden="true">#</a> 二、安装</h3><p>选择自己的安装路径，然后勾选添加到环境变量中去。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee04ad633b9d.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>默认的端口号是6379，此时可以修改默认的端口号，也可以后期在配置文件中进行修改。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee04aff9f1a2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后继续点击下一步，完成安装。</p><h3 id="三、配置" tabindex="-1"><a class="header-anchor" href="#三、配置" aria-hidden="true">#</a> 三、配置</h3><p>1.在如下的配置文件中，修改密码，端口号，以及rename-command <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee056827650a.png" alt="img" loading="lazy"></p><p>2.修改密码：全局搜索 requirepass ，然后设置密码为 sasecret，如下：</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee056f8ea8fd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>3.修改端口号：全局搜索 port , 然后设置端口号为 6388，如下：</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee0572f8b4ad.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>4.修改rename-command：全局搜索 rename-command , 然后设置别名，如下：（配置rename-command 配置项 “RENAME_CONFIG”，这样即使存在未授权访问，也能够给攻击者使用config 指令加大难度）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rename-command FLUSHALL <span class="token string">&quot;&quot;</span>
rename-command FLUSHDB  <span class="token string">&quot;&quot;</span>
rename-command CONFIG   <span class="token string">&quot;&quot;</span>
rename-command KEYS     <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、重启" tabindex="-1"><a class="header-anchor" href="#四、重启" aria-hidden="true">#</a> 四、重启</h3><p>修改了配置文件之后需要重启redis，可以搜索服务 进行重启，也可以如下命令重启。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee04dfe01863.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>可能产生的问题：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Windows<span class="token punctuation">\\</span>system3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net start redis
服务没有响应控制功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法：redis.conf文件开启的命令前面不能有空格。</p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee058398b0b5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="tomcat的部署" tabindex="-1"><a class="header-anchor" href="#tomcat的部署" aria-hidden="true">#</a> tomcat的部署</h2><h1 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h1><p>有一种想法,在windows10下可不可以让我们的tomcat开机自动运行?答案是可以的。我们下面就为大家来演示。</p><h2 id="_1-下载tomcat" tabindex="-1"><a class="header-anchor" href="#_1-下载tomcat" aria-hidden="true">#</a> 1.下载tomcat</h2><p>首先我们去tomcat官网下载对应的服务器版本。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee085cebe633.png" alt="img" loading="lazy"> 下载完成之后我们解压到本地文件夹。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee086a1b78df.png" alt="img" loading="lazy"></p><h2 id="_2-注册服务" tabindex="-1"><a class="header-anchor" href="#_2-注册服务" aria-hidden="true">#</a> 2.注册服务</h2><p>打开命令行CMD，cd到tomcat的bin目录下，输入:</p><h6 id="service-bat-install-服务名" tabindex="-1"><a class="header-anchor" href="#service-bat-install-服务名" aria-hidden="true">#</a> service.bat install 服务名</h6><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee087c46f528.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-查看服务" tabindex="-1"><a class="header-anchor" href="#_3-查看服务" aria-hidden="true">#</a> 3.查看服务</h2><p>我们打开控制面板-&gt;管理工具-&gt;服务。可以看到服务已经注册,现在我们来启动它。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee0890406134.png" alt="img" loading="lazy"></p><h2 id="_4-配置服务" tabindex="-1"><a class="header-anchor" href="#_4-配置服务" aria-hidden="true">#</a> 4.配置服务</h2><p>如果需要开机自启,我们将它修改为自动。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee0899657d60.png" alt="img" loading="lazy"></p><h2 id="_5-浏览验证" tabindex="-1"><a class="header-anchor" href="#_5-浏览验证" aria-hidden="true">#</a> 5.浏览验证</h2><p>启动成功后,打开浏览器进行访问。这里我将端口号改成了7999。每个人可以自己设置。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-06-10/5ee08af355eff.png" alt="img" loading="lazy"></p><h2 id="_6-删除服务" tabindex="-1"><a class="header-anchor" href="#_6-删除服务" aria-hidden="true">#</a> 6.删除服务</h2><p>只需要同样cmd到Tomcat的bin目录下，然后输入service.bat remove 服务名</p><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h1><h2 id="阿里云datahub写入数据测试" tabindex="-1"><a class="header-anchor" href="#阿里云datahub写入数据测试" aria-hidden="true">#</a> 阿里云Datahub写入数据测试</h2><h2 id="_1-阿里云datahub写入数据测试" tabindex="-1"><a class="header-anchor" href="#_1-阿里云datahub写入数据测试" aria-hidden="true">#</a> 1.阿里云Datahub写入数据测试</h2><p>此文档主要是熟悉阿里云的数据中台中一个组件Datahub的使用，以便接入国网湖南检修公司2020年挖掘换流阀运行大数据开展晶闸管状态评估的方法数据运维项目中的换流阀的运行数据。经过对阿里云的DataHub文档的熟悉发现，已经集成了Flume插件。故对此插件进行测试。</p><h3 id="_1-1-安装flume" tabindex="-1"><a class="header-anchor" href="#_1-1-安装flume" aria-hidden="true">#</a> 1.1.安装Flume</h3><p>环境：192.168.0.222 root用户 目录：/root/datatest/</p><p>下载apache-flume-1.9.0-bin.tar.gz，并解压：tar zxvf apache-flume-1.9.0-bin.tar.gz 到/root/datatest/apache-flume-1.9.0-bin；</p><h3 id="_1-2-安装flume-datahub" tabindex="-1"><a class="header-anchor" href="#_1-2-安装flume-datahub" aria-hidden="true">#</a> 1.2.安装Flume-datahub</h3><p>下载aliyun-flume-datahub-sink-2.0.4.tar.gz，创建目录：/root/datatest/apache-flume-1.9.0-bin/plugins.d，解压：tar zxvf aliyun-flume-datahub-sink-2.0.4.tar.gz到此目录。</p><h3 id="_1-3-测试1-datahubsink的基本连接" tabindex="-1"><a class="header-anchor" href="#_1-3-测试1-datahubsink的基本连接" aria-hidden="true">#</a> 1.3.测试1：DatahubSink的基本连接</h3><p>在测试之前，可以参考文档中的用户指南，进行创建Project、创建Topic、创建Schema等操作。 为了方便测试，创建了test_hlf的Topic。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d5ce447d98.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d5d0dc1b85.png" alt="img" loading="lazy"></p><p>准备好了基本环境后，开始编写flume的配置文件：datahub_basic.conf</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>a1.sources = r1
a1.sinks = k1
a1.channels = c1
# Describe/configure the source
a1.sources.r1.type = exec
a1.sources.r1.command = cat /root/datatest/temp/test.csv
# Describe the sink
a1.sinks.k1.type = com.aliyun.datahub.flume.sink.DatahubSink
a1.sinks.k1.datahub.accessId = RbKJtykmSnR26zto
a1.sinks.k1.datahub.accessKey = aKrXJ95pe3T0XlOLZ7MnkHD6Uy0oZY
a1.sinks.k1.datahub.endPoint = https://dh-cn-hangzhou.aliyuncs.com
a1.sinks.k1.datahub.project = songy
a1.sinks.k1.datahub.topic = test_hlf
a1.sinks.k1.serializer = DELIMITED
a1.sinks.k1.serializer.delimiter = ,
a1.sinks.k1.serializer.fieldnames = value1,value2
a1.sinks.k1.serializer.charset = UTF-8
a1.sinks.k1.datahub.retryTimes = 5
a1.sinks.k1.datahub.retryInterval = 5
a1.sinks.k1.datahub.batchSize = 100
a1.sinks.k1.datahub.batchTimeout = 5
a1.sinks.k1.datahub.enablePb = true
a1.sinks.k1.datahub.compressType = DEFLATE
# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 10000
a1.channels.c1.transactionCapacity = 10000
# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备好测试数据文件test.csv，并上传至/root/datatest/temp。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d5f0321162.png" alt="img" loading="lazy"> 然后启动flume进行测试，看下csv数据是否可以正常加载到DataHub中： bin/flume-ng agent -n a1 -c conf -f conf/datahub_basic.conf -Dflume.root.logger=INFO,console 查看DataHub工作台， <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d5f50e0370.png" alt="img" loading="lazy"> 由此看到，数据加载到了DataHub，但是是乱码，而且数据重复掉了。</p><p>为了重新测试，新建了一个新的Topic：hlf，配置了3个Schema：value1，value2，value3. 经过排查发现，乱码是因为测试的cvs文件的问题，重新新建一个cvs文件后正常无乱码。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d57012dec1.png" alt="img" loading="lazy"></p><h3 id="_1-4-测试2-测试flume-taildir-source" tabindex="-1"><a class="header-anchor" href="#_1-4-测试2-测试flume-taildir-source" aria-hidden="true">#</a> 1.4.测试2：测试Flume Taildir Source</h3><p>经过基本的flume数据测试，接下来就针对业务所需进行测试。由于业务是针对文件和文件的变化进行实时数据采集的，所以这里选择了使用Taildir source作为Flume源。</p><p>编写flume的配置文件：datahub_basic_3.conf</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>a1.sources = r1
a1.sinks = k1
a1.channels = c1
# Describe/configure the source
a1.sources.r1.type = TAILDIR
a1.sources.r1.positionFile = /root/datatest/jsondir/taildir_position.json
a1.sources.r1.filegroups = f1
a1.sources.r1.filegroups.f1 = /root/datatest/temp2/.*csv
# Describe the sink
a1.sinks.k1.type = com.aliyun.datahub.flume.sink.DatahubSink
a1.sinks.k1.datahub.accessId = RbKJtykmSnR26zto
a1.sinks.k1.datahub.accessKey = aKrXJ95pe3T0XlOLZ7MnkHD6Uy0oZY
a1.sinks.k1.datahub.endPoint = https://dh-cn-hangzhou.aliyuncs.com
a1.sinks.k1.datahub.project = songy
a1.sinks.k1.datahub.topic = hlf
a1.sinks.k1.serializer = DELIMITED
a1.sinks.k1.serializer.delimiter = ,
a1.sinks.k1.serializer.fieldnames = value1,value2,value3
a1.sinks.k1.serializer.charset = UTF-8
a1.sinks.k1.datahub.retryTimes = 5
a1.sinks.k1.datahub.retryInterval = 5
a1.sinks.k1.datahub.batchSize = 100
a1.sinks.k1.datahub.batchTimeout = 5
a1.sinks.k1.datahub.enablePb = true
a1.sinks.k1.datahub.compressType = DEFLATE
# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 10000
a1.channels.c1.transactionCapacity = 10000
# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备测试的文件： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d6166c9ff2.png" alt="img" loading="lazy"> 依次写入几条数据到csv文件中，如图： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d6187382a5.png" alt="img" loading="lazy"> 启动Flume：bin/flume-ng agent -n a1 -c conf -f conf/datahub_basic_3.conf -Dflume.root.logger=INFO,console -Dflume.monitoring.type=http -Dflume.monitoring.port=1234 说明：添加-Dflume.monitoring.type=http -Dflume.monitoring.port=1234是为了方便查看内置统计的数据的。 启动成功后，开始测试：在目录/root/datatest/temp2中上传test3-1.csv和test3-1.csv两个文件，然后观察flume日志： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d6289ba5d9.png" alt="img" loading="lazy"></p><p>然后分别追加记录进行测试<img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d62cd7272e.png" alt="img" loading="lazy"> 继续观察日志： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d62ee006af.png" alt="img" loading="lazy"> 可以看到数据正常被采集。 特别说明：Taildir Source会把每个文件的已经读到的位置信息以json格式储存在positionFile文件中，以保证数据不重复。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d63357d2f3.png" alt="img" loading="lazy"> 测试的时候注意，使用echo进行追加，不要使用vim写。vim重新打开了文件，会被认为是一个新文件。</p><p>然后进入到datahub工作台，看到刚刚的测试数据成功上传，并且支持中文。中文也没有乱码。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-19/5f8d572eca57c.png" alt="img" loading="lazy"></p><p>说明：阿里云数据总线DataHub的文档地址 https://help.aliyun.com/document_detail/47439.html?spm=5176.cndatahub.0.0.3f29f05eUrtzwf</p><h2 id="将datahub数据同步到maxcompute" tabindex="-1"><a class="header-anchor" href="#将datahub数据同步到maxcompute" aria-hidden="true">#</a> 将Datahub数据同步到MaxCompute</h2><h2 id="_1-将datahub数据同步到maxcompute" tabindex="-1"><a class="header-anchor" href="#_1-将datahub数据同步到maxcompute" aria-hidden="true">#</a> 1.将Datahub数据同步到MaxCompute</h2><p>昨天已经将数据使用flume插件同步到了datahub之中，现在还需要将数据同步到MaxCompute中供数据读取所用。</p><h3 id="_1-1-创建maxcompute项目" tabindex="-1"><a class="header-anchor" href="#_1-1-创建maxcompute项目" aria-hidden="true">#</a> 1.1.创建MaxCompute项目</h3><p>创建MaxCompute项目，需要同时开通MaxCompute和DataWorks两个服务 如图： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebbbd4a4a2.png" alt="img" loading="lazy"></p><h3 id="_1-2-创建maxcompute表" tabindex="-1"><a class="header-anchor" href="#_1-2-创建maxcompute表" aria-hidden="true">#</a> 1.2.创建MaxCompute表</h3><p>CREATE TABLE IF NOT EXISTS test2(value1 STRING,value2 STRING,value3 String) PARTITIONED BY (ds STRING,hh STRING) STORED AS ALIORC; <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebc9285abe.png" alt="img" loading="lazy"></p><h3 id="_1-3-创建datahub连接点" tabindex="-1"><a class="header-anchor" href="#_1-3-创建datahub连接点" aria-hidden="true">#</a> 1.3.创建datahub连接点</h3><p>创建连接点时，使用系统时间作为分区字段，分区设置和创建的MaxCompute的分区一致。 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebbe0b408a.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebbe86756a.png" alt="img" loading="lazy"></p><h3 id="_1-4-测试同步数据" tabindex="-1"><a class="header-anchor" href="#_1-4-测试同步数据" aria-hidden="true">#</a> 1.4.测试同步数据</h3><p>启动flume， <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebcf66d9e2.png" alt="img" loading="lazy"> 手动追加一条记录，并观察 <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebd3d2652b.png" alt="img" loading="lazy"></p><figure><img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebd1c9b0e5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看MaxCompute记录， <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-20/5f8ebce1406af.png" alt="img" loading="lazy"> 看到数据已经成功使用系统时间作为分区同步到数据了。</p><h2 id="安装并配置maxcompute客户端" tabindex="-1"><a class="header-anchor" href="#安装并配置maxcompute客户端" aria-hidden="true">#</a> 安装并配置MaxCompute客户端</h2><p>1</p><h2 id="_1-安装并配置maxcompute客户端" tabindex="-1"><a class="header-anchor" href="#_1-安装并配置maxcompute客户端" aria-hidden="true">#</a> 1.安装并配置MaxCompute客户端</h2><h3 id="_1-1-下载客户端" tabindex="-1"><a class="header-anchor" href="#_1-1-下载客户端" aria-hidden="true">#</a> 1.1.下载客户端</h3>`,80),Fs={href:"http://123.56.93.7:8080/Public/Uploads/2020-10-23/5f9281361aa19.zip",target:"_blank",rel:"noopener noreferrer"},Xs=e(`<h3 id="_1-2-配置客户端配置文件" tabindex="-1"><a class="header-anchor" href="#_1-2-配置客户端配置文件" aria-hidden="true">#</a> 1.2.配置客户端配置文件</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>project_name=XXX
access_id=XXX
access_key=XXX
end_point=http://service.cn-hangzhou.maxcompute.aliyun.com/api
log_view_host=http://logview.odps.aliyun.com/
https_check=true
# confirm threshold for query input size(unit: GB)
data_size_confirm=0.1
# this url is for odpscmd update
update_url=http://repo.aliyun.com/odpscmd
# download sql results by instance tunnel
use_instance_tunnel=true
# the max records when download sql results by instance tunnel
instance_tunnel_max_record=1000
# IMPORTANT:
#   If leaving tunnel_endpoint untouched, console will try to automatically get one from odps service, which might charge networking fees in some cases.
#   Please refer to https://help.aliyun.com/document_detail/34951.html
#tunnel_endpoint=http://dt.cn-hangzhou.maxcompute.aliyun.com
# use set.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span> to set flags when console launched
# e.g. set.odps.sql.select.output.format=csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>project_name指的是MaxCompute项目名称； access_id和access_key是用户的云账号信息 end_point是MaxCompute服务的访问链接；根据创建项目时选择Region以及网络信息进行选择；</p><h3 id="_1-3-运行客户端" tabindex="-1"><a class="header-anchor" href="#_1-3-运行客户端" aria-hidden="true">#</a> 1.3.运行客户端</h3><p>运行bin目录下的odpscmd.bat（windows运行bin/odpscmd.bat,Linux系统运行bin/odpscmd） 如图： <img src="http://123.56.93.7:8080/Public/Uploads/2020-10-23/5f9283cf83576.png" alt="img" loading="lazy"> 则表示配置并连接成功；</p><h1 id="python学习" tabindex="-1"><a class="header-anchor" href="#python学习" aria-hidden="true">#</a> python学习</h1><h2 id="docker下部署py项目" tabindex="-1"><a class="header-anchor" href="#docker下部署py项目" aria-hidden="true">#</a> docker下部署py项目</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong></p><p><strong>3.操作步骤</strong></p><h2 id="py虚拟环境venv" tabindex="-1"><a class="header-anchor" href="#py虚拟环境venv" aria-hidden="true">#</a> py虚拟环境venv</h2><p><strong>1.简介</strong> 创建一个py的虚拟环境，防止包冲突 <strong>2.参考资料</strong> https://www.cnblogs.com/zhaof/p/7299025.html <strong>3.操作步骤</strong> （1）进入py项目 在terminal窗口执行命令 <img src="http://123.56.93.7:8080/Public/Uploads/2020-11-04/5fa20d820ec2c.png" alt="img" loading="lazy"> （2）进入当前文件夹会发现 出现一个venv的文件夹 <img src="http://123.56.93.7:8080/Public/Uploads/2020-11-04/5fa211651eecd.png" alt="img" loading="lazy"> （3） 执行pip install -r requirements.txt 安装依赖库 <img src="http://123.56.93.7:8080/Public/Uploads/2020-11-04/5fa211a22bc9b.png" alt="img" loading="lazy"> 如果没有requirements.txt执行命令 pip freeze &gt; requirements.txt 会生成系统用到的所有版本号</p><h1 id="微服务学习" tabindex="-1"><a class="header-anchor" href="#微服务学习" aria-hidden="true">#</a> 微服务学习</h1><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务" aria-hidden="true">#</a> 微服务</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong> https://blog.csdn.net/weixin_42126468/article/details/104081682</p><p><strong>3.操作步骤</strong></p><h2 id="若依微服务升级mybait-plus" tabindex="-1"><a class="header-anchor" href="#若依微服务升级mybait-plus" aria-hidden="true">#</a> 若依微服务升级mybait plus</h2><p><strong>1.简介</strong></p><p><strong>2.参考资料</strong></p><p><strong>3.操作步骤</strong> 1.替换mybaits的jar包 <code>&lt;mybatis-plus.version&gt;3.3.2&lt;/mybatis-plus.version&gt;</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- Mybatis 依赖配置 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mybatis-plus.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.修改ruoyi-common-security的pom文件</p>`,23),Js=e('<h2 id="微服务升级改造" tabindex="-1"><a class="header-anchor" href="#微服务升级改造" aria-hidden="true">#</a> 微服务升级改造</h2><h1 id="_1-集成maven-assembly-plugin插件-一键打包-更方便系统的迁移部署" tabindex="-1"><a class="header-anchor" href="#_1-集成maven-assembly-plugin插件-一键打包-更方便系统的迁移部署" aria-hidden="true">#</a> 1.集成maven-assembly-plugin插件 一键打包 更方便系统的迁移部署</h1><figure><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/6036fe8e92840.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_2-优化接口文档工具springfox-swagger2-更美观" tabindex="-1"><a class="header-anchor" href="#_2-优化接口文档工具springfox-swagger2-更美观" aria-hidden="true">#</a> 2.优化接口文档工具springfox-swagger2 更美观</h1><figure><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/6036ff81a0120.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_3-集成mybaits-plus-精简代码" tabindex="-1"><a class="header-anchor" href="#_3-集成mybaits-plus-精简代码" aria-hidden="true">#</a> 3.集成mybaits-plus 精简代码</h1><figure><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/6037009eb8d83.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_4-实现自动更新-插入人-插入时间-更新人-更新时间" tabindex="-1"><a class="header-anchor" href="#_4-实现自动更新-插入人-插入时间-更新人-更新时间" aria-hidden="true">#</a> 4.实现自动更新 插入人 插入时间 更新人 更新时间</h1><figure><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/6037018251e07.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_5-翻译注解的实现-通过设置注解-对应字典编码-将翻译后的值-设置到对应字段" tabindex="-1"><a class="header-anchor" href="#_5-翻译注解的实现-通过设置注解-对应字典编码-将翻译后的值-设置到对应字段" aria-hidden="true">#</a> 5.翻译注解的实现 通过设置注解 对应字典编码 将翻译后的值 设置到对应字段</h1><figure><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/603702b0acb64.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_6-优化微服务代码生成模块-多数据源切换问题" tabindex="-1"><a class="header-anchor" href="#_6-优化微服务代码生成模块-多数据源切换问题" aria-hidden="true">#</a> 6.优化微服务代码生成模块 多数据源切换问题</h1><p><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/603703c3e6eff.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/603704b7e1ce3.png" alt="img" loading="lazy"></p><h1 id="_7-优化微服务-代码模板在线配置" tabindex="-1"><a class="header-anchor" href="#_7-优化微服务-代码模板在线配置" aria-hidden="true">#</a> 7.优化微服务 代码模板在线配置</h1><p><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/603704dec7da4.png" alt="img" loading="lazy"><img src="http://123.56.93.7:8080/Public/Uploads/2021-02-25/603704f88dc78.png" alt="img" loading="lazy"></p>',15);function Ks(Gs,Vs){const t=p("ExternalLinkIcon"),c=p("groupId"),i=p("artifactId"),l=p("dependency");return r(),d("div",null,[m,n("ul",null,[g,v,h,b,n("li",null,[n("p",null,[n("a",f,[a("@return"),s(t)]),a(" $return$ **/")])])]),n("p",null,[a("`groovyScript(“def result=’’; def params=\\”${_1}\\”.replaceAll(‘[\\[|\\]|\\s]’, ‘’).split(‘,’).toList(); for(i = 0; i < params.size(); i++) { result+=’ * "),n("a",y,[a("@param"),s(t)]),a(" ‘ + params[i] + ((i < params.size() - 1) ? ‘\\n’:’’) }; return result”, methodParameters())")]),_,n("h3",x,[w,a(" 1.1."),n("a",q,[a("@Table"),s(t)]),a(" 建立实体类和数据库表之间的关系。")]),n("p",null,[a("我们在实体类上面使用"),n("a",S,[a("@Table"),s(t)]),a("这个注解,里面有一个参数name。然后填写name的名称。这个名称要和数据库的表名进行对应。 "),P]),n("h3",C,[A,a(" 1.2."),n("a",D,[a("@column"),s(t)]),a(" 建立实体类属性和数据库表字段之间的对应关系")]),n("p",null,[a("我们在某一个属性上面使用"),n("a",j,[a("@column"),s(t)]),a("这个注解,里面也有一个参数name。这个name代表对应数据库表里面的字段。 "),z]),n("h3",T,[E,a(" 1.3."),n("a",U,[a("@Id"),s(t)]),a(" 指明这个键是主键")]),n("p",null,[a("当我们在某一个属性上面使用了"),n("a",I,[a("@Id"),s(t)]),a("这个注解之后,就表明了数据库对应的这个字段是主键。 "),M]),n("h3",B,[L,a(" 1.4."),n("a",R,[a("@GeneratedValue"),s(t)]),a(" 执行insert操作之后,把数据库递增的主键写到实体类当中。")]),O,n("h3",N,[H,a(" 1.5."),n("a",F,[a("@Transient"),s(t)]),a(" 标记实体类中属性和数据库中不同的字段")]),X,J,n("h3",K,[G,a(" 2.1."),n("a",V,[a("@RepeatSubmit"),s(t)]),a("这个注解")]),n("p",null,[a("web项目上线以后当访问压力增大的时候,这个时候处理的速度往往大于测试的时候。所以有的时候用户的请求还没有被处理,他就一直的进行点击这样一来就会造成请求的重复提交。这样会造成很多的问题。所以我们要使用"),n("a",Q,[a("@RepeatSubmit"),s(t)]),a("这个注解来避免用户进行重复的提交。这个注解是作用在我们要防止提交方法上面的。 "),W]),Y,Z,n("h3",$,[nn,a(" 3.1."),n("a",an,[a("@GET"),s(t)]),a(" 代表的是获得和查询的意思")]),sn,n("h3",tn,[en,a(" 3.2."),n("a",pn,[a("@POST"),s(t)]),a(" 代表的是提交的意思")]),on,n("h3",cn,[ln,a(" 3.3."),n("a",un,[a("@PUT"),s(t)]),a(" 代表的是修改的意思")]),rn,n("h3",dn,[kn,a(" 3.4."),n("a",mn,[a("@DELETE"),s(t)]),a(" 代表的是删除的意思")]),gn,n("h3",vn,[hn,a(" 4.1."),n("a",bn,[a("@Api"),s(t)]),a("()")]),fn,n("h3",yn,[_n,a(" 4.2."),n("a",xn,[a("@ApiOperation"),s(t)]),a("()")]),wn,n("h3",qn,[Sn,a(" 4.3."),n("a",Pn,[a("@ApiModel"),s(t)]),a("()")]),Cn,n("h3",An,[Dn,a(" 4.4."),n("a",jn,[a("@ApiModelProperty"),s(t)]),a("()")]),zn,n("h3",Tn,[En,a(" 4.5."),n("a",Un,[a("@ApiImplicitParams"),s(t)]),a("()")]),In,n("h3",Mn,[Bn,a(" 4.6."),n("a",Ln,[a("@ApiImplicitParam"),s(t)]),a("()")]),Rn,n("h3",On,[Nn,a(" 6.1."),n("a",Hn,[a("@RequiresAuthentication"),s(t)])]),n("p",null,[a("使用"),n("a",Fn,[a("@RequiresAuthentication"),s(t)]),a("可以在类,方法或者实例上面。那么当前的Subject必须经过session的认证。")]),n("h3",Xn,[Jn,a(" 6.2."),n("a",Kn,[a("@RequiresGuest"),s(t)])]),n("p",null,[a("使用这个"),n("a",Gn,[a("@RequiresGuest"),s(t)]),a("可以在类,方法或者实例上面的时候。Subject可以是gust身份。不用去认证。")]),n("h3",Vn,[Qn,a(" 6.3."),n("a",Wn,[a("@RequiresPermissions"),s(t)])]),n("p",null,[a("使用"),n("a",Yn,[a("@RequiresPermissions"),s(t)]),a("之后,当前的subject需要经过某些特定的权限。才可以访问被标记的方法。")]),n("h3",Zn,[$n,a(" 6.4."),n("a",na,[a("@RequiresRoles"),s(t)])]),n("p",null,[a("使用"),n("a",aa,[a("@RequiresRoles"),s(t)]),a("之后,当前subject必须拥有所有指定角色才可以访问方法,不然会抛出AuthorizationException异常。")]),n("h3",sa,[ta,a(" 6.5."),n("a",ea,[a("@RequiresUser"),s(t)])]),n("p",null,[a("使用"),n("a",pa,[a("@RequiresUser"),s(t)]),a("之后,当前subject必须是应用的用户。才可以访问指定的方法。")]),oa,n("h3",ca,[ia,a(" 7.1."),n("a",la,[a("@Data"),s(t)])]),n("p",null,[a("它是一个组合的注解,它包含了多个注解。有"),n("a",ua,[a("@getter"),s(t)]),a(","),n("a",ra,[a("@setter"),s(t)]),a(","),n("a",da,[a("@AllArgsConstructor"),s(t)]),a(","),n("a",ka,[a("@NOArgsConstructor"),s(t)]),a(","),n("a",ma,[a("@EqualsAndHashCode"),s(t)]),a(","),n("a",ga,[a("@ToString"),s(t)]),a("等注解组成。他主要是作用在实体类上面的。这样一来我们就可以直接使用这个实体类getter,setter,toString,equal,hashcode等一系列的方法。 "),va]),n("h3",ha,[ba,a(" 7.2."),n("a",fa,[a("@Getter"),s(t)])]),ya,n("h3",_a,[xa,a(" 7.3."),n("a",wa,[a("@Setter"),s(t)])]),qa,n("h3",Sa,[Pa,a(" 7.4."),n("a",Ca,[a("@NOArgsConstructor"),s(t)])]),Aa,n("h3",Da,[ja,a(" 7.5."),n("a",za,[a("@AllArgsConstructor"),s(t)])]),Ta,n("h3",Ea,[Ua,a(" 7.6."),n("a",Ia,[a("@EqualsAndHashCode"),s(t)])]),Ma,n("h3",Ba,[La,a(" 7.7."),n("a",Ra,[a("@ToString"),s(t)])]),Oa,n("p",null,[a("修改ConContractController switch块里面缺少default的问题 "),Na,a(" 修改IpUtils switch块里面缺少default的问题 "),Ha,a(" 修复Base64里面encodedData decodedData数组定义格式错误 "),Fa,a(" 修复Convert里面c数组定义格式错误 "),Xa,a(" 修复Md5Utils里面hash数组定义格式错误 "),Ja,a(" 修复SysDictTypeServiceImpl里面updateDictType方法"),n("a",Ka,[a("@Transactional"),s(t)]),a("缺少rollbackFor的问题 "),Ga,a(" 以下方法类似 "),Va,a(" 修改包名Test大写为小写test "),Qa,a(" 解决抽象方法需要加javadoc注释的问题 "),Wa,a(" 修改所有类必须添加创建者信息 "),Ya,a(" 修改内部尾注释的问题 "),Za,a(" 修复禁止使用把double值转换为BigDecimal "),$a,a(" 修复类属性需要javadoc注释 "),ns,a(" 修复条件表达式复杂逻辑问题 "),as,a(" 修复集合初始化指定集合大小问题 "),ss]),ts,n("p",null,[a("其中，"),n("a",es,[a("@Autowired"),s(t)]),a("注解对在哪里和如何完成自动连接提供了更多的细微的控制，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。这里特别说明一下这个注解，"),n("a",ps,[a("@Autowired"),s(t)]),a("注解让Spring自动装配bean从而达到IOC的功能，在这段代码中就是将Mapper注入了Service层，利用这个对象，在服务层就可以对数据进行实际的操作，我们选择一个方法的实现作为例子来看：")]),os,n("ol",null,[cs,is,n("li",null,[ls,n("p",null,[a("1.事务场景中，抛出异常被catch后，如果需要回滚，一定要手动回滚事务。这里涉及到"),n("a",us,[a("@Transaction"),s(t)]),a("这一注解，例如用户新增需要插入用户表、用户与岗位关联表、用户与角色关联表，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作， 这样可以防止出现脏数据，就可以使用事务让它实现回退。然而Spring的默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。如果想针对非检查异常进行事务回滚，可以在"),n("a",rs,[a("@Transactional"),s(t)]),a(" 注解里使用 rollbackFor 属性明确指定异常。代码是"),ds,a("。 2.禁止使用构造方法BigDecimal(double)的方式把double值转化为BigDecimal对象 说明：反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString方法返回String对象，造成内存资源浪费。 3.除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量，以提高可读性。 说明：很多if语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？我们应该将逻辑表达式的结果进行命名，解释它的涵义，而不是直接让阅读者分析结果，例如：")]),ks])]),ms,n("p",null,[a("这里我们要明白Bean这一概念，所谓Bean，在官方文档的定义是“In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.”我们可以认为Beans是类的代理，更准确地来说，JavaBean是一种特殊的Java类，它必须满足：①提供一个默认的无参构造函数。②需要被序列化并且实现了 Serializable 接口。③可能有一系列可读写属性。④可能有一系列的 getter 或 setter 方法。在Spring Boot中，向IOC容器注册Beans的方法是注解，我们在代码中经常看见的"),n("a",gs,[a("@Autowired"),s(t)]),a("的作用就是自动按照类型注入。当使用注解注入属性时，set 方法可以省略。它只能注入其他bean类型（ByType）。当有多个类型匹配时，使用要注入的对象变量名称作为bean的id (ByName) ,在spring容器查找，找到了也可以注入成功。找不到就报错。这里避免了用XML文件去注册Beans，这也是Spring Boot的初衷。")]),vs,n("p",null,[a("之后我们就可以具体去关注Spring中如何实现AOP了，现在主流的方法是利用注解来开发Spring AOP，这里首先介绍一下"),n("a",hs,[a("@Aspect"),s(t)]),a("注解，"),n("a",bs,[a("@Aspect"),s(t)]),a("注解的作用是标志切面，用它注解一个类后Spinrg IoC容器会认为这是一个切面，值得注意的是被定义为切面的类仍然是一个Bean，因此需要"),n("a",fs,[a("@Component"),s(t)]),a("注解标注。之后在类中会用"),n("a",ys,[a("@Pointcut"),s(t)]),a("注解标注切点，它用来指定需要调用advice的地方，通常是一个方法，在我们的代码中使用了"),n("a",_s,[a("@annotation"),s(t)]),a("标注方法（在使用这个注解的地方调用advice），代码如下：")]),xs,n("p",null,[a("实际上EasyExcel的功能非常强大，本文介绍的也只是非常基本的用法，更多的用法和语法请参考官方的文档，链接："),n("a",ws,[a("EasyExcel官方文档"),s(t)])]),qs,n("p",null,[a("2安装kibana .docker run —name kibana -e ELASTICSEARCH_URL="),n("a",Ss,[a("http://10.0.0.11:9200"),s(t)]),a(" -p 5601:5601 -d kibana:5.6.9")]),Ps,n("p",null,[a("1.启动提示无法实例化ES "),n("a",Cs,[a("@SpringBootApplication"),s(t)]),a("(exclude = { DataSourceAutoConfiguration.class }) public class RuoYiApplication { System.setProperty(“es.set.netty.runtime.available.processors”, “false”); 2.Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true 解决办法 https://blog.csdn.net/weixin_42633131/article/details/84782516")]),As,n("p",null,[a("关于N叉树的后序遍历，可以到leetCode上去看更多的拓展内容（包括非递归算法） "),n("a",Ds,[a("LeetCode题目"),s(t)])]),js,n("p",null,[n("a",zs,[a("项目文档规范模板.rar"),s(t)])]),Ts,Es,n("p",null,[a("欢迎使用ShowDoc！ 遵循阿里代码规范文档"),n("a",Us,[a("阿里巴巴Java开发手册终极版v1.3.0.pdf"),s(t)])]),Is,n("p",null,[a("检查nginx是否启动成功 (1)直接在浏览器地址栏输入网址 "),n("a",Ms,[a("http://localhost:80，回车"),s(t)])]),Bs,n("ul",null,[n("li",null,[n("a",Ls,[a("一、下载"),s(t)])]),n("li",null,[n("a",Rs,[a("二、安装"),s(t)])]),n("li",null,[n("a",Os,[a("三、配置"),s(t)])]),Ns]),Hs,n("p",null,[n("a",Fs,[a("odpscmd_public.zip"),s(t)]),a(" 解压下载的安装文件，得到bin、conf、lib、plugins四个文件夹")]),Xs,s(l,null,{default:o(()=>[s(c,null,{default:o(()=>[a("com.baomidou")]),_:1}),s(i,null,{default:o(()=>[a("mybatis-plus-boot-starter")]),_:1})]),_:1}),a(" 3.更改nacos对应的配置文件 mybaits改为mybaits-plus ![img](http://123.56.93.7:8080/Public/Uploads/2020-12-24/5fe459ef3c39b.png) "),Js])}const Ws=u(k,[["render",Ks],["__file","工具教程.html.vue"]]);export{Ws as default};
